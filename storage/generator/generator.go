// Package generator generates migrations for the Oasis Indexer
// from the genesis file at a particular height.
package generator

import (
	"fmt"
	"io"
	"strings"

	"github.com/iancoleman/strcase"
	"github.com/oasisprotocol/oasis-core/go/common/entity"
	"github.com/oasisprotocol/oasis-core/go/common/node"
	genesis "github.com/oasisprotocol/oasis-core/go/genesis/api"
	registry "github.com/oasisprotocol/oasis-core/go/registry/api"

	"github.com/oasislabs/oasis-block-indexer/go/log"
)

const bulkInsertBatchSize = 1000

// MigrationGenerator generates migrations for the Oasis Indexer
// target storage.
type MigrationGenerator struct {
	logger *log.Logger
}

// NewMigrationGenerator creates a new migration generator.
func NewMigrationGenerator(logger *log.Logger) *MigrationGenerator {
	return &MigrationGenerator{logger}
}

// WriteGenesisDocumentMigrationOasis3 creates a new migration that re-initializes all
// height-dependent state as per the provided genesis document.
func (mg *MigrationGenerator) WriteGenesisDocumentMigrationOasis3(w io.Writer, document *genesis.Document) error {
	io.WriteString(w, `-- DO NOT MODIFY
-- This file was autogenerated by the oasis-indexer migration generator.
`)

	for _, f := range []func(io.Writer, *genesis.Document) error{
		mg.addRegistryBackendMigrations,
		mg.addStakingBackendMigrations,
		mg.addGovernanceBackendMigrations,
	} {
		if err := f(w, document); err != nil {
			return err
		}
	}

	return nil
}

func (mg *MigrationGenerator) addRegistryBackendMigrations(w io.Writer, document *genesis.Document) error {
	chainID := strcase.ToSnake(document.ChainID)

	// Populate entities.
	io.WriteString(w, fmt.Sprintf(`
-- Registry Backend Data
TRUNCATE %s.entities CASCADE;`, chainID))
	io.WriteString(w, fmt.Sprintf(`
INSERT INTO %s.entities (id)
VALUES
`, chainID))
	for i, signedEntity := range document.Registry.Entities {
		var entity entity.Entity
		if err := signedEntity.Open(registry.RegisterEntitySignatureContext, &entity); err != nil {
			return err
		}

		io.WriteString(w, fmt.Sprintf(
			"\t('%s')",
			entity.ID.String(),
		))

		if i != len(document.Registry.Entities)-1 {
			io.WriteString(w, ",\n")
		}
	}
	io.WriteString(w, ";\n")

	// Populate nodes.
	io.WriteString(w, fmt.Sprintf(`
TRUNCATE %s.nodes CASCADE;`, chainID))
	io.WriteString(w, fmt.Sprintf(`
INSERT INTO %s.nodes (id, entity_id, expiration, tls_pubkey, tls_next_pubkey, p2p_pubkey, consensus_pubkey, roles)
VALUES
`, chainID))
	for i, signedNode := range document.Registry.Nodes {
		var node node.Node
		if err := signedNode.Open(registry.RegisterNodeSignatureContext, &node); err != nil {
			return err
		}

		io.WriteString(w, fmt.Sprintf(
			"\t('%s', '%s', %d, '%s', '%s', '%s', '%s', '%s')",
			node.ID.String(),
			node.EntityID.String(),
			node.Expiration,
			node.TLS.PubKey.String(),
			node.TLS.NextPubKey.String(),
			node.P2P.ID.String(),
			node.Consensus.ID.String(),
			node.Roles.String(),
		))

		if i != len(document.Registry.Nodes)-1 {
			io.WriteString(w, ",\n")
		}
	}
	io.WriteString(w, ";\n")

	// Populate runtimes.
	io.WriteString(w, fmt.Sprintf(`
TRUNCATE %s.runtimes CASCADE;`, chainID))

	if len(document.Registry.Runtimes) > 0 {
		io.WriteString(w, fmt.Sprintf(`
INSERT INTO %s.runtimes (id, suspended, kind, tee_hardware, key_manager)
VALUES
`, chainID))
		for i, runtime := range document.Registry.Runtimes {
			keyManager := "none"
			if runtime.KeyManager != nil {
				keyManager = runtime.KeyManager.String()
			}
			io.WriteString(w, fmt.Sprintf(
				"\t('%s', %t, '%s', '%s', '%s')",
				runtime.ID.String(),
				false,
				runtime.Kind.String(),
				runtime.TEEHardware.String(),
				keyManager,

				// TODO(ennsharma): Add extra_data.
			))

			if i != len(document.Registry.Runtimes)-1 {
				io.WriteString(w, ",\n")
			}
		}
		io.WriteString(w, ";\n")
	}

	if len(document.Registry.SuspendedRuntimes) > 0 {
		io.WriteString(w, fmt.Sprintf(`
INSERT INTO %s.runtimes (id, suspended, kind, tee_hardware, key_manager)
VALUES
`, chainID))

		for i, runtime := range document.Registry.SuspendedRuntimes {
			keyManager := "none"
			if runtime.KeyManager != nil {
				keyManager = runtime.KeyManager.Hex()
			}
			io.WriteString(w, fmt.Sprintf(
				"\t('%s', %t, '%s', '%s', '%s')",
				runtime.ID.String(),
				true,
				runtime.Kind.String(),
				runtime.TEEHardware.String(),
				keyManager,

				// TODO(ennsharma): Add extra_data.
			))

			if i != len(document.Registry.SuspendedRuntimes)-1 {
				io.WriteString(w, ",\n")
			}
		}
		io.WriteString(w, ";\n")
	}

	return nil
}

func (mg *MigrationGenerator) addStakingBackendMigrations(w io.Writer, document *genesis.Document) error {
	chainID := strcase.ToSnake(document.ChainID)

	// Populate accounts.
	io.WriteString(w, fmt.Sprintf(`
-- Staking Backend Data
TRUNCATE %s.accounts CASCADE;`, chainID))
	io.WriteString(w, fmt.Sprintf(`
INSERT INTO %s.accounts (address, general_balance, nonce, escrow_balance_active, escrow_total_shares_active, escrow_balance_debonding, escrow_total_shares_debonding)
VALUES
`, chainID))

	i := 0
	for address, account := range document.Staking.Ledger {
		io.WriteString(w, fmt.Sprintf(
			"\t('%s', %d, %d, %d, %d, %d, %d)",
			address.String(),
			account.General.Balance.ToBigInt(),
			account.General.Nonce,
			account.Escrow.Active.Balance.ToBigInt(),
			account.Escrow.Active.TotalShares.ToBigInt(),
			account.Escrow.Debonding.Balance.ToBigInt(),
			account.Escrow.Debonding.TotalShares.ToBigInt(),
		))
		i++

		if i%bulkInsertBatchSize == 0 {
			io.WriteString(w, ";\n")
			io.WriteString(w, fmt.Sprintf(`
INSERT INTO %s.accounts (address, general_balance, nonce, escrow_balance_active, escrow_total_shares_active, escrow_balance_debonding, escrow_total_shares_debonding)
VALUES
`, chainID))
		} else if i != len(document.Staking.Ledger) {
			io.WriteString(w, ",\n")
		}
	}
	io.WriteString(w, ";\n")

	// Populate allowances.
	io.WriteString(w, fmt.Sprintf(`
TRUNCATE %s.allowances CASCADE;`, chainID))

	foundAllowances := false // in case allowances are empty

	i = 0
	for owner, account := range document.Staking.Ledger {
		if len(account.General.Allowances) > 0 && foundAllowances {
			io.WriteString(w, ",\n")
		}

		ownerAllowances := make([]string, len(account.General.Allowances))
		j := 0
		for beneficiary, allowance := range account.General.Allowances {
			ownerAllowances[j] = fmt.Sprintf(
				"\t('%s', '%s', %d)",
				owner.String(),
				beneficiary.String(),
				allowance.ToBigInt(),
			)
			j++
		}
		if len(account.General.Allowances) > 0 && !foundAllowances {
			io.WriteString(w, fmt.Sprintf(`
INSERT INTO %s.allowances (owner, beneficiary, allowance)
VALUES
`, chainID))
			foundAllowances = true
		}

		io.WriteString(w, strings.Join(ownerAllowances, ",\n"))
		i++
	}
	if foundAllowances {
		io.WriteString(w, ";\n")
	}

	// Populate delegations.
	io.WriteString(w, fmt.Sprintf(`
TRUNCATE %s.delegations CASCADE;`, chainID))
	io.WriteString(w, fmt.Sprintf(`
INSERT INTO %s.delegations (delegatee, delegator, shares)
VALUES
`, chainID))
	i = 0
	j := 0
	for delegatee, escrows := range document.Staking.Delegations {
		k := 0
		for delegator, delegation := range escrows {
			io.WriteString(w, fmt.Sprintf(
				"\t('%s', '%s', %d)",
				delegatee.String(),
				delegator.String(),
				delegation.Shares.ToBigInt(),
			))
			i++

			if i%bulkInsertBatchSize == 0 {
				io.WriteString(w, ";\n")
				io.WriteString(w, fmt.Sprintf(`
INSERT INTO %s.delegations (delegatee, delegator, shares)
VALUES
`, chainID))
			} else if !(k == len(escrows)-1 && j == len(document.Staking.Delegations)-1) {
				io.WriteString(w, ",\n")
			}
			k++
		}
		j++
	}
	io.WriteString(w, ";\n")

	// Populate debonding delegations.
	io.WriteString(w, fmt.Sprintf(`
TRUNCATE %s.debonding_delegations CASCADE;`, chainID))
	io.WriteString(w, fmt.Sprintf(`
INSERT INTO %s.debonding_delegations (delegatee, delegator, shares, debond_end)
VALUES
`, chainID))
	i = 0
	for delegatee, escrows := range document.Staking.DebondingDelegations {
		delegateeDebondingDelegations := make([]string, 0)
		j := 0
		for delegator, debondingDelegations := range escrows {
			delegatorDebondingDelegations := make([]string, len(debondingDelegations))
			for k, debondingDelegation := range debondingDelegations {
				delegatorDebondingDelegations[k] = fmt.Sprintf(
					"\t('%s', '%s', %d, %d)",
					delegatee.String(),
					delegator.String(),
					debondingDelegation.Shares.ToBigInt(),
					debondingDelegation.DebondEndTime,
				)
			}
			delegateeDebondingDelegations = append(delegateeDebondingDelegations, delegatorDebondingDelegations...)
			j++
		}
		io.WriteString(w, strings.Join(delegateeDebondingDelegations, ",\n"))
		i++

		if i != len(document.Staking.DebondingDelegations) && len(escrows) > 0 {
			io.WriteString(w, ",\n")
		}
	}
	io.WriteString(w, ";\n")

	return nil
}

func (mg *MigrationGenerator) addGovernanceBackendMigrations(w io.Writer, document *genesis.Document) error {
	chainID := strcase.ToSnake(document.ChainID)

	// Populate proposals.
	io.WriteString(w, fmt.Sprintf(`
-- Governance Backend Data
TRUNCATE %s.proposals CASCADE;`, chainID))

	if len(document.Governance.Proposals) > 0 {

		// TODO(ennsharma): Extract `executed` for proposal.
		io.WriteString(w, fmt.Sprintf(`
INSERT INTO %s.proposals (id, submitter, state, deposit, handler, cp_target_version, rhp_target_version, rcp_target_version, upgrade_epoch, cancels, created_at, closes_at, invalid_votes)
VALUES
`, chainID))

		for i, proposal := range document.Governance.Proposals {
			if proposal.Content.Upgrade != nil {
				io.WriteString(w, fmt.Sprintf(
					"\t(%d, '%s', '%s', %d, '%s', '%s', '%s', '%s', %d, %s, %d, %d, %d)",
					proposal.ID,
					proposal.Submitter.String(),
					proposal.State.String(),
					proposal.Deposit.ToBigInt(),
					proposal.Content.Upgrade.Handler,
					proposal.Content.Upgrade.Target.ConsensusProtocol.String(),
					proposal.Content.Upgrade.Target.RuntimeHostProtocol.String(),
					proposal.Content.Upgrade.Target.RuntimeCommitteeProtocol.String(),
					proposal.Content.Upgrade.Epoch,
					"null",
					proposal.CreatedAt,
					proposal.ClosesAt,
					proposal.InvalidVotes,
				))
			} else if proposal.Content.CancelUpgrade != nil {
				io.WriteString(w, fmt.Sprintf(
					"\t(%d, '%s', '%s', %d, '%s', '%s', '%s', '%s', '%s', %d, %d, %d, %d)",
					proposal.ID,
					proposal.Submitter.String(),
					proposal.State.String(),
					proposal.Deposit.ToBigInt(),
					"",
					"",
					"",
					"",
					"",
					proposal.Content.CancelUpgrade.ProposalID,
					proposal.CreatedAt,
					proposal.ClosesAt,
					proposal.InvalidVotes,
				))
			}

			if i != len(document.Governance.Proposals)-1 {
				io.WriteString(w, ",\n")
			}
		}
		io.WriteString(w, ";\n")
	}

	// Populate votes.
	io.WriteString(w, fmt.Sprintf(`
TRUNCATE %s.votes CASCADE;`, chainID))

	foundVotes := false // in case votes are empty

	i := 0
	for proposalID, voteEntries := range document.Governance.VoteEntries {
		if len(voteEntries) > 0 && !foundVotes {
			io.WriteString(w, fmt.Sprintf(`
INSERT INTO %s.votes (proposal, voter, vote)
VALUES
`, chainID))
			foundVotes = true
		}
		votes := make([]string, len(voteEntries))
		for j, voteEntry := range voteEntries {
			votes[j] = fmt.Sprintf(
				"\t(%d, '%s', '%s')",
				proposalID,
				voteEntry.Voter.String(),
				voteEntry.Vote.String(),
			)
		}
		io.WriteString(w, strings.Join(votes, ",\n"))
		i++

		if i != len(document.Governance.VoteEntries) && len(voteEntries) > 0 {
			io.WriteString(w, ",\n")
		}
	}
	if foundVotes {
		io.WriteString(w, ";\n")
	}

	return nil
}
