// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package types

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	codegen_runtime "github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns the status of indexing.
	// (GET /)
	GetStatus(w http.ResponseWriter, r *http.Request)
	// Returns a list of consensus layer accounts.
	// Note that for performance reasons, the info returned by this endpoint
	// may be slightly stale (<2 minutes). For the most up-to-date account state,
	// query the single-account endpoint.
	// (GET /consensus/accounts)
	GetConsensusAccounts(w http.ResponseWriter, r *http.Request, params GetConsensusAccountsParams)
	// Returns a consensus layer account.
	// (GET /consensus/accounts/{address})
	GetConsensusAccountsAddress(w http.ResponseWriter, r *http.Request, address StakingAddress)
	// Returns an account's debonding delegations.
	// (GET /consensus/accounts/{address}/debonding_delegations)
	GetConsensusAccountsAddressDebondingDelegations(w http.ResponseWriter, r *http.Request, address StakingAddress, params GetConsensusAccountsAddressDebondingDelegationsParams)
	// Returns a list of debonding delegations to an account.
	// (GET /consensus/accounts/{address}/debonding_delegations_to)
	GetConsensusAccountsAddressDebondingDelegationsTo(w http.ResponseWriter, r *http.Request, address StakingAddress, params GetConsensusAccountsAddressDebondingDelegationsToParams)
	// Returns an account's delegations.
	// (GET /consensus/accounts/{address}/delegations)
	GetConsensusAccountsAddressDelegations(w http.ResponseWriter, r *http.Request, address StakingAddress, params GetConsensusAccountsAddressDelegationsParams)
	// Returns a list of delegations to an account.
	// (GET /consensus/accounts/{address}/delegations_to)
	GetConsensusAccountsAddressDelegationsTo(w http.ResponseWriter, r *http.Request, address StakingAddress, params GetConsensusAccountsAddressDelegationsToParams)
	// Returns a list of consensus blocks, sorted from most to least recent.
	// (GET /consensus/blocks)
	GetConsensusBlocks(w http.ResponseWriter, r *http.Request, params GetConsensusBlocksParams)
	// Returns a consensus block.
	// (GET /consensus/blocks/{height})
	GetConsensusBlocksHeight(w http.ResponseWriter, r *http.Request, height int64)
	// Returns a list of entities registered at the consensus layer.
	// (GET /consensus/entities)
	GetConsensusEntities(w http.ResponseWriter, r *http.Request, params GetConsensusEntitiesParams)
	// Returns an entity registered at the consensus layer.
	// (GET /consensus/entities/{address})
	GetConsensusEntitiesAddress(w http.ResponseWriter, r *http.Request, address StakingAddress)
	// Returns a list of nodes registered at the consensus layer.
	// (GET /consensus/entities/{address}/nodes)
	GetConsensusEntitiesAddressNodes(w http.ResponseWriter, r *http.Request, address StakingAddress, params GetConsensusEntitiesAddressNodesParams)
	// Returns a node registered at the consensus layer.
	// (GET /consensus/entities/{address}/nodes/{node_id})
	GetConsensusEntitiesAddressNodesNodeId(w http.ResponseWriter, r *http.Request, address StakingAddress, nodeId Ed25519PubKey)
	// Returns a list of consensus epochs.
	// (GET /consensus/epochs)
	GetConsensusEpochs(w http.ResponseWriter, r *http.Request, params GetConsensusEpochsParams)
	// Returns a consensus epoch.
	// (GET /consensus/epochs/{epoch})
	GetConsensusEpochsEpoch(w http.ResponseWriter, r *http.Request, epoch int64)
	// Returns a list of consensus events.
	// (GET /consensus/events)
	GetConsensusEvents(w http.ResponseWriter, r *http.Request, params GetConsensusEventsParams)
	// Returns a list of governance proposals.
	// (GET /consensus/proposals)
	GetConsensusProposals(w http.ResponseWriter, r *http.Request, params GetConsensusProposalsParams)
	// Returns a governance proposal.
	// (GET /consensus/proposals/{proposal_id})
	GetConsensusProposalsProposalId(w http.ResponseWriter, r *http.Request, proposalId uint64)
	// Returns a list of votes for a governance proposal.
	// (GET /consensus/proposals/{proposal_id}/votes)
	GetConsensusProposalsProposalIdVotes(w http.ResponseWriter, r *http.Request, proposalId uint64, params GetConsensusProposalsProposalIdVotesParams)

	// (GET /consensus/roothash_messages)
	GetConsensusRoothashMessages(w http.ResponseWriter, r *http.Request, params GetConsensusRoothashMessagesParams)
	// Returns a list of consensus transactions.
	// (GET /consensus/transactions)
	GetConsensusTransactions(w http.ResponseWriter, r *http.Request, params GetConsensusTransactionsParams)
	// Returns a consensus transaction.
	// (GET /consensus/transactions/{tx_hash})
	GetConsensusTransactionsTxHash(w http.ResponseWriter, r *http.Request, txHash string)
	// Returns a list of validators registered at the consensus layer (the list includes all registered entities, even those without a currently active validator node).
	// (GET /consensus/validators)
	GetConsensusValidators(w http.ResponseWriter, r *http.Request, params GetConsensusValidatorsParams)
	// Returns a validator registered at the consensus layer.
	// (GET /consensus/validators/{address})
	GetConsensusValidatorsAddress(w http.ResponseWriter, r *http.Request, address StakingAddress)
	// Returns historical information for a single validator.
	// (GET /consensus/validators/{address}/history)
	GetConsensusValidatorsAddressHistory(w http.ResponseWriter, r *http.Request, address StakingAddress, params GetConsensusValidatorsAddressHistoryParams)
	// Returns a (sliding) timeline of the recorded daily unique active accounts for
	// either consensus or one of the paratimes.
	// (GET /{layer}/stats/active_accounts)
	GetLayerStatsActiveAccounts(w http.ResponseWriter, r *http.Request, layer Layer, params GetLayerStatsActiveAccountsParams)
	// Returns a timeline of the transaction volume at the chosen granularity,
	// for either consensus or one of the paratimes.
	// (GET /{layer}/stats/tx_volume)
	GetLayerStatsTxVolume(w http.ResponseWriter, r *http.Request, layer Layer, params GetLayerStatsTxVolumeParams)
	// Returns a runtime account.
	// (GET /{runtime}/accounts/{address})
	GetRuntimeAccountsAddress(w http.ResponseWriter, r *http.Request, runtime Runtime, address EthOrOasisAddress)
	// Returns the list of non-fungible token (NFT) instances owned by an account.
	// (GET /{runtime}/accounts/{address}/nfts)
	GetRuntimeAccountsAddressNfts(w http.ResponseWriter, r *http.Request, runtime Runtime, address EthOrOasisAddress, params GetRuntimeAccountsAddressNftsParams)
	// Returns a list of Runtime blocks.
	// (GET /{runtime}/blocks)
	GetRuntimeBlocks(w http.ResponseWriter, r *http.Request, runtime Runtime, params GetRuntimeBlocksParams)
	// Returns a list of runtime events.
	// (GET /{runtime}/events)
	GetRuntimeEvents(w http.ResponseWriter, r *http.Request, runtime Runtime, params GetRuntimeEventsParams)
	// Returns a list of EVM (ERC-20, ...) tokens on the runtime.
	// (GET /{runtime}/evm_tokens)
	GetRuntimeEvmTokens(w http.ResponseWriter, r *http.Request, runtime Runtime, params GetRuntimeEvmTokensParams)
	// Returns info on an EVM (ERC-20, ...) token on the runtime.
	// (GET /{runtime}/evm_tokens/{address})
	GetRuntimeEvmTokensAddress(w http.ResponseWriter, r *http.Request, runtime Runtime, address EthOrOasisAddress)
	// Returns the list of holders of an EVM (ERC-20, ...) token.
	// This endpoint does not verify that `address` is actually an EVM token; if it is not, it will simply return an empty list.
	// (GET /{runtime}/evm_tokens/{address}/holders)
	GetRuntimeEvmTokensAddressHolders(w http.ResponseWriter, r *http.Request, runtime Runtime, address EthOrOasisAddress, params GetRuntimeEvmTokensAddressHoldersParams)
	// Returns the list of non-fungible token (NFT) instances of an EVM (ERC-721, ...) token.
	// This endpoint does not verify that `address` is actually an EVM token; if it is not, it will simply return an empty list.
	// (GET /{runtime}/evm_tokens/{address}/nfts)
	GetRuntimeEvmTokensAddressNfts(w http.ResponseWriter, r *http.Request, runtime Runtime, address EthOrOasisAddress, params GetRuntimeEvmTokensAddressNftsParams)
	// Returns the non-fungible token (NFT) instance of an EVM (ERC-721, ...) token.
	// (GET /{runtime}/evm_tokens/{address}/nfts/{id})
	GetRuntimeEvmTokensAddressNftsId(w http.ResponseWriter, r *http.Request, runtime Runtime, address EthOrOasisAddress, id TextBigInt)
	// Returns the runtime status.
	// (GET /{runtime}/status)
	GetRuntimeStatus(w http.ResponseWriter, r *http.Request, runtime Runtime)
	// Returns a list of Runtime transactions.
	// (GET /{runtime}/transactions)
	GetRuntimeTransactions(w http.ResponseWriter, r *http.Request, runtime Runtime, params GetRuntimeTransactionsParams)
	// Returns runtime transactions with the given transaction hash.
	// (GET /{runtime}/transactions/{tx_hash})
	GetRuntimeTransactionsTxHash(w http.ResponseWriter, r *http.Request, runtime Runtime, txHash string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusAccounts operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusAccounts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusAccountsParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusAccounts(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusAccountsAddress operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusAccountsAddress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "address" -------------
	var address StakingAddress

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "address", codegen_runtime.ParamLocationPath, chi.URLParam(r, "address"), &address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusAccountsAddress(w, r, address)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusAccountsAddressDebondingDelegations operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusAccountsAddressDebondingDelegations(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "address" -------------
	var address StakingAddress

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "address", codegen_runtime.ParamLocationPath, chi.URLParam(r, "address"), &address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusAccountsAddressDebondingDelegationsParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusAccountsAddressDebondingDelegations(w, r, address, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusAccountsAddressDebondingDelegationsTo operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusAccountsAddressDebondingDelegationsTo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "address" -------------
	var address StakingAddress

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "address", codegen_runtime.ParamLocationPath, chi.URLParam(r, "address"), &address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusAccountsAddressDebondingDelegationsToParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusAccountsAddressDebondingDelegationsTo(w, r, address, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusAccountsAddressDelegations operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusAccountsAddressDelegations(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "address" -------------
	var address StakingAddress

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "address", codegen_runtime.ParamLocationPath, chi.URLParam(r, "address"), &address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusAccountsAddressDelegationsParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusAccountsAddressDelegations(w, r, address, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusAccountsAddressDelegationsTo operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusAccountsAddressDelegationsTo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "address" -------------
	var address StakingAddress

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "address", codegen_runtime.ParamLocationPath, chi.URLParam(r, "address"), &address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusAccountsAddressDelegationsToParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusAccountsAddressDelegationsTo(w, r, address, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusBlocks operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusBlocks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusBlocksParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "from" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	// ------------- Optional query parameter "hash" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "hash", r.URL.Query(), &params.Hash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusBlocks(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusBlocksHeight operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusBlocksHeight(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "height" -------------
	var height int64

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "height", codegen_runtime.ParamLocationPath, chi.URLParam(r, "height"), &height)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "height", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusBlocksHeight(w, r, height)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusEntities operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusEntities(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusEntitiesParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusEntities(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusEntitiesAddress operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusEntitiesAddress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "address" -------------
	var address StakingAddress

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "address", codegen_runtime.ParamLocationPath, chi.URLParam(r, "address"), &address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusEntitiesAddress(w, r, address)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusEntitiesAddressNodes operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusEntitiesAddressNodes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "address" -------------
	var address StakingAddress

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "address", codegen_runtime.ParamLocationPath, chi.URLParam(r, "address"), &address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusEntitiesAddressNodesParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusEntitiesAddressNodes(w, r, address, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusEntitiesAddressNodesNodeId operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusEntitiesAddressNodesNodeId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "address" -------------
	var address StakingAddress

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "address", codegen_runtime.ParamLocationPath, chi.URLParam(r, "address"), &address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	// ------------- Path parameter "node_id" -------------
	var nodeId Ed25519PubKey

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "node_id", codegen_runtime.ParamLocationPath, chi.URLParam(r, "node_id"), &nodeId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "node_id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusEntitiesAddressNodesNodeId(w, r, address, nodeId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusEpochs operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusEpochs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusEpochsParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusEpochs(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusEpochsEpoch operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusEpochsEpoch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "epoch" -------------
	var epoch int64

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "epoch", codegen_runtime.ParamLocationPath, chi.URLParam(r, "epoch"), &epoch)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "epoch", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusEpochsEpoch(w, r, epoch)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusEvents operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusEventsParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "block" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "block", r.URL.Query(), &params.Block)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "block", Err: err})
		return
	}

	// ------------- Optional query parameter "tx_index" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "tx_index", r.URL.Query(), &params.TxIndex)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tx_index", Err: err})
		return
	}

	// ------------- Optional query parameter "tx_hash" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "tx_hash", r.URL.Query(), &params.TxHash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tx_hash", Err: err})
		return
	}

	// ------------- Optional query parameter "rel" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "rel", r.URL.Query(), &params.Rel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rel", Err: err})
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusEvents(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusProposals operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusProposals(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusProposalsParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "submitter" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "submitter", r.URL.Query(), &params.Submitter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "submitter", Err: err})
		return
	}

	// ------------- Optional query parameter "state" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusProposals(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusProposalsProposalId operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusProposalsProposalId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "proposal_id" -------------
	var proposalId uint64

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "proposal_id", codegen_runtime.ParamLocationPath, chi.URLParam(r, "proposal_id"), &proposalId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "proposal_id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusProposalsProposalId(w, r, proposalId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusProposalsProposalIdVotes operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusProposalsProposalIdVotes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "proposal_id" -------------
	var proposalId uint64

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "proposal_id", codegen_runtime.ParamLocationPath, chi.URLParam(r, "proposal_id"), &proposalId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "proposal_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusProposalsProposalIdVotesParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusProposalsProposalIdVotes(w, r, proposalId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusRoothashMessages operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusRoothashMessages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusRoothashMessagesParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Required query parameter "runtime" -------------

	if paramValue := r.URL.Query().Get("runtime"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "runtime"})
		return
	}

	err = codegen_runtime.BindQueryParameter("form", true, true, "runtime", r.URL.Query(), &params.Runtime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runtime", Err: err})
		return
	}

	// ------------- Optional query parameter "round" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "round", r.URL.Query(), &params.Round)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "round", Err: err})
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "rel" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "rel", r.URL.Query(), &params.Rel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rel", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusRoothashMessages(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusTransactions operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusTransactions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusTransactionsParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "block" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "block", r.URL.Query(), &params.Block)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "block", Err: err})
		return
	}

	// ------------- Optional query parameter "method" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "method", r.URL.Query(), &params.Method)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "method", Err: err})
		return
	}

	// ------------- Optional query parameter "sender" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "sender", r.URL.Query(), &params.Sender)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sender", Err: err})
		return
	}

	// ------------- Optional query parameter "rel" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "rel", r.URL.Query(), &params.Rel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rel", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusTransactions(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusTransactionsTxHash operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusTransactionsTxHash(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tx_hash" -------------
	var txHash string

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "tx_hash", codegen_runtime.ParamLocationPath, chi.URLParam(r, "tx_hash"), &txHash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tx_hash", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusTransactionsTxHash(w, r, txHash)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusValidators operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusValidators(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusValidatorsParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusValidators(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusValidatorsAddress operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusValidatorsAddress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "address" -------------
	var address StakingAddress

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "address", codegen_runtime.ParamLocationPath, chi.URLParam(r, "address"), &address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusValidatorsAddress(w, r, address)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusValidatorsAddressHistory operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusValidatorsAddressHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "address" -------------
	var address StakingAddress

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "address", codegen_runtime.ParamLocationPath, chi.URLParam(r, "address"), &address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusValidatorsAddressHistoryParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "from" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusValidatorsAddressHistory(w, r, address, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLayerStatsActiveAccounts operation middleware
func (siw *ServerInterfaceWrapper) GetLayerStatsActiveAccounts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "layer" -------------
	var layer Layer

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "layer", codegen_runtime.ParamLocationPath, chi.URLParam(r, "layer"), &layer)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "layer", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLayerStatsActiveAccountsParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "window_step_seconds" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "window_step_seconds", r.URL.Query(), &params.WindowStepSeconds)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "window_step_seconds", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLayerStatsActiveAccounts(w, r, layer, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLayerStatsTxVolume operation middleware
func (siw *ServerInterfaceWrapper) GetLayerStatsTxVolume(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "layer" -------------
	var layer Layer

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "layer", codegen_runtime.ParamLocationPath, chi.URLParam(r, "layer"), &layer)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "layer", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLayerStatsTxVolumeParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "window_size_seconds" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "window_size_seconds", r.URL.Query(), &params.WindowSizeSeconds)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "window_size_seconds", Err: err})
		return
	}

	// ------------- Optional query parameter "window_step_seconds" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "window_step_seconds", r.URL.Query(), &params.WindowStepSeconds)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "window_step_seconds", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLayerStatsTxVolume(w, r, layer, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRuntimeAccountsAddress operation middleware
func (siw *ServerInterfaceWrapper) GetRuntimeAccountsAddress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "runtime" -------------
	var runtime Runtime

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "runtime", codegen_runtime.ParamLocationPath, chi.URLParam(r, "runtime"), &runtime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runtime", Err: err})
		return
	}

	// ------------- Path parameter "address" -------------
	var address EthOrOasisAddress

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "address", codegen_runtime.ParamLocationPath, chi.URLParam(r, "address"), &address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRuntimeAccountsAddress(w, r, runtime, address)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRuntimeAccountsAddressNfts operation middleware
func (siw *ServerInterfaceWrapper) GetRuntimeAccountsAddressNfts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "runtime" -------------
	var runtime Runtime

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "runtime", codegen_runtime.ParamLocationPath, chi.URLParam(r, "runtime"), &runtime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runtime", Err: err})
		return
	}

	// ------------- Path parameter "address" -------------
	var address EthOrOasisAddress

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "address", codegen_runtime.ParamLocationPath, chi.URLParam(r, "address"), &address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRuntimeAccountsAddressNftsParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "token_address" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "token_address", r.URL.Query(), &params.TokenAddress)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token_address", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRuntimeAccountsAddressNfts(w, r, runtime, address, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRuntimeBlocks operation middleware
func (siw *ServerInterfaceWrapper) GetRuntimeBlocks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "runtime" -------------
	var runtime Runtime

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "runtime", codegen_runtime.ParamLocationPath, chi.URLParam(r, "runtime"), &runtime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runtime", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRuntimeBlocksParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "from" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	// ------------- Optional query parameter "hash" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "hash", r.URL.Query(), &params.Hash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRuntimeBlocks(w, r, runtime, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRuntimeEvents operation middleware
func (siw *ServerInterfaceWrapper) GetRuntimeEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "runtime" -------------
	var runtime Runtime

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "runtime", codegen_runtime.ParamLocationPath, chi.URLParam(r, "runtime"), &runtime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runtime", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRuntimeEventsParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "block" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "block", r.URL.Query(), &params.Block)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "block", Err: err})
		return
	}

	// ------------- Optional query parameter "tx_index" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "tx_index", r.URL.Query(), &params.TxIndex)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tx_index", Err: err})
		return
	}

	// ------------- Optional query parameter "tx_hash" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "tx_hash", r.URL.Query(), &params.TxHash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tx_hash", Err: err})
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "rel" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "rel", r.URL.Query(), &params.Rel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rel", Err: err})
		return
	}

	// ------------- Optional query parameter "evm_log_signature" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "evm_log_signature", r.URL.Query(), &params.EvmLogSignature)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "evm_log_signature", Err: err})
		return
	}

	// ------------- Optional query parameter "contract_address" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "contract_address", r.URL.Query(), &params.ContractAddress)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "contract_address", Err: err})
		return
	}

	// ------------- Optional query parameter "nft_id" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "nft_id", r.URL.Query(), &params.NftId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nft_id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRuntimeEvents(w, r, runtime, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRuntimeEvmTokens operation middleware
func (siw *ServerInterfaceWrapper) GetRuntimeEvmTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "runtime" -------------
	var runtime Runtime

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "runtime", codegen_runtime.ParamLocationPath, chi.URLParam(r, "runtime"), &runtime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runtime", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRuntimeEvmTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRuntimeEvmTokens(w, r, runtime, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRuntimeEvmTokensAddress operation middleware
func (siw *ServerInterfaceWrapper) GetRuntimeEvmTokensAddress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "runtime" -------------
	var runtime Runtime

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "runtime", codegen_runtime.ParamLocationPath, chi.URLParam(r, "runtime"), &runtime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runtime", Err: err})
		return
	}

	// ------------- Path parameter "address" -------------
	var address EthOrOasisAddress

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "address", codegen_runtime.ParamLocationPath, chi.URLParam(r, "address"), &address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRuntimeEvmTokensAddress(w, r, runtime, address)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRuntimeEvmTokensAddressHolders operation middleware
func (siw *ServerInterfaceWrapper) GetRuntimeEvmTokensAddressHolders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "runtime" -------------
	var runtime Runtime

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "runtime", codegen_runtime.ParamLocationPath, chi.URLParam(r, "runtime"), &runtime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runtime", Err: err})
		return
	}

	// ------------- Path parameter "address" -------------
	var address EthOrOasisAddress

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "address", codegen_runtime.ParamLocationPath, chi.URLParam(r, "address"), &address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRuntimeEvmTokensAddressHoldersParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRuntimeEvmTokensAddressHolders(w, r, runtime, address, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRuntimeEvmTokensAddressNfts operation middleware
func (siw *ServerInterfaceWrapper) GetRuntimeEvmTokensAddressNfts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "runtime" -------------
	var runtime Runtime

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "runtime", codegen_runtime.ParamLocationPath, chi.URLParam(r, "runtime"), &runtime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runtime", Err: err})
		return
	}

	// ------------- Path parameter "address" -------------
	var address EthOrOasisAddress

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "address", codegen_runtime.ParamLocationPath, chi.URLParam(r, "address"), &address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRuntimeEvmTokensAddressNftsParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRuntimeEvmTokensAddressNfts(w, r, runtime, address, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRuntimeEvmTokensAddressNftsId operation middleware
func (siw *ServerInterfaceWrapper) GetRuntimeEvmTokensAddressNftsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "runtime" -------------
	var runtime Runtime

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "runtime", codegen_runtime.ParamLocationPath, chi.URLParam(r, "runtime"), &runtime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runtime", Err: err})
		return
	}

	// ------------- Path parameter "address" -------------
	var address EthOrOasisAddress

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "address", codegen_runtime.ParamLocationPath, chi.URLParam(r, "address"), &address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id TextBigInt

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "id", codegen_runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRuntimeEvmTokensAddressNftsId(w, r, runtime, address, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRuntimeStatus operation middleware
func (siw *ServerInterfaceWrapper) GetRuntimeStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "runtime" -------------
	var runtime Runtime

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "runtime", codegen_runtime.ParamLocationPath, chi.URLParam(r, "runtime"), &runtime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runtime", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRuntimeStatus(w, r, runtime)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRuntimeTransactions operation middleware
func (siw *ServerInterfaceWrapper) GetRuntimeTransactions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "runtime" -------------
	var runtime Runtime

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "runtime", codegen_runtime.ParamLocationPath, chi.URLParam(r, "runtime"), &runtime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runtime", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRuntimeTransactionsParams

	// ------------- Optional query parameter "limit" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "block" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "block", r.URL.Query(), &params.Block)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "block", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	// ------------- Optional query parameter "rel" -------------

	err = codegen_runtime.BindQueryParameter("form", true, false, "rel", r.URL.Query(), &params.Rel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rel", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRuntimeTransactions(w, r, runtime, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRuntimeTransactionsTxHash operation middleware
func (siw *ServerInterfaceWrapper) GetRuntimeTransactionsTxHash(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "runtime" -------------
	var runtime Runtime

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "runtime", codegen_runtime.ParamLocationPath, chi.URLParam(r, "runtime"), &runtime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runtime", Err: err})
		return
	}

	// ------------- Path parameter "tx_hash" -------------
	var txHash string

	err = codegen_runtime.BindStyledParameterWithLocation("simple", false, "tx_hash", codegen_runtime.ParamLocationPath, chi.URLParam(r, "tx_hash"), &txHash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tx_hash", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRuntimeTransactionsTxHash(w, r, runtime, txHash)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/", wrapper.GetStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/accounts", wrapper.GetConsensusAccounts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/accounts/{address}", wrapper.GetConsensusAccountsAddress)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/accounts/{address}/debonding_delegations", wrapper.GetConsensusAccountsAddressDebondingDelegations)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/accounts/{address}/debonding_delegations_to", wrapper.GetConsensusAccountsAddressDebondingDelegationsTo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/accounts/{address}/delegations", wrapper.GetConsensusAccountsAddressDelegations)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/accounts/{address}/delegations_to", wrapper.GetConsensusAccountsAddressDelegationsTo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/blocks", wrapper.GetConsensusBlocks)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/blocks/{height}", wrapper.GetConsensusBlocksHeight)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/entities", wrapper.GetConsensusEntities)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/entities/{address}", wrapper.GetConsensusEntitiesAddress)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/entities/{address}/nodes", wrapper.GetConsensusEntitiesAddressNodes)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/entities/{address}/nodes/{node_id}", wrapper.GetConsensusEntitiesAddressNodesNodeId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/epochs", wrapper.GetConsensusEpochs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/epochs/{epoch}", wrapper.GetConsensusEpochsEpoch)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/events", wrapper.GetConsensusEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/proposals", wrapper.GetConsensusProposals)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/proposals/{proposal_id}", wrapper.GetConsensusProposalsProposalId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/proposals/{proposal_id}/votes", wrapper.GetConsensusProposalsProposalIdVotes)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/roothash_messages", wrapper.GetConsensusRoothashMessages)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/transactions", wrapper.GetConsensusTransactions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/transactions/{tx_hash}", wrapper.GetConsensusTransactionsTxHash)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/validators", wrapper.GetConsensusValidators)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/validators/{address}", wrapper.GetConsensusValidatorsAddress)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/validators/{address}/history", wrapper.GetConsensusValidatorsAddressHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{layer}/stats/active_accounts", wrapper.GetLayerStatsActiveAccounts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{layer}/stats/tx_volume", wrapper.GetLayerStatsTxVolume)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{runtime}/accounts/{address}", wrapper.GetRuntimeAccountsAddress)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{runtime}/accounts/{address}/nfts", wrapper.GetRuntimeAccountsAddressNfts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{runtime}/blocks", wrapper.GetRuntimeBlocks)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{runtime}/events", wrapper.GetRuntimeEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{runtime}/evm_tokens", wrapper.GetRuntimeEvmTokens)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{runtime}/evm_tokens/{address}", wrapper.GetRuntimeEvmTokensAddress)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{runtime}/evm_tokens/{address}/holders", wrapper.GetRuntimeEvmTokensAddressHolders)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{runtime}/evm_tokens/{address}/nfts", wrapper.GetRuntimeEvmTokensAddressNfts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{runtime}/evm_tokens/{address}/nfts/{id}", wrapper.GetRuntimeEvmTokensAddressNftsId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{runtime}/status", wrapper.GetRuntimeStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{runtime}/transactions", wrapper.GetRuntimeTransactions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{runtime}/transactions/{tx_hash}", wrapper.GetRuntimeTransactionsTxHash)
	})

	return r
}

type HumanReadableErrorJSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

type NotFoundErrorJSONResponse interface{}

type GetStatusRequestObject struct {
}

type GetStatusResponseObject interface {
	VisitGetStatusResponse(w http.ResponseWriter) error
}

type GetStatus200JSONResponse Status

func (response GetStatus200JSONResponse) VisitGetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStatus400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetStatus400JSONResponse) VisitGetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetStatus404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetStatus404JSONResponse) VisitGetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetStatus500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetStatus500JSONResponse) VisitGetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsRequestObject struct {
	Params GetConsensusAccountsParams
}

type GetConsensusAccountsResponseObject interface {
	VisitGetConsensusAccountsResponse(w http.ResponseWriter) error
}

type GetConsensusAccounts200JSONResponse AccountList

func (response GetConsensusAccounts200JSONResponse) VisitGetConsensusAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccounts400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusAccounts400JSONResponse) VisitGetConsensusAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccounts404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusAccounts404JSONResponse) VisitGetConsensusAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccounts500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusAccounts500JSONResponse) VisitGetConsensusAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressRequestObject struct {
	Address StakingAddress `json:"address"`
}

type GetConsensusAccountsAddressResponseObject interface {
	VisitGetConsensusAccountsAddressResponse(w http.ResponseWriter) error
}

type GetConsensusAccountsAddress200JSONResponse Account

func (response GetConsensusAccountsAddress200JSONResponse) VisitGetConsensusAccountsAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddress400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusAccountsAddress400JSONResponse) VisitGetConsensusAccountsAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddress404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusAccountsAddress404JSONResponse) VisitGetConsensusAccountsAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddress500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusAccountsAddress500JSONResponse) VisitGetConsensusAccountsAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDebondingDelegationsRequestObject struct {
	Address StakingAddress `json:"address"`
	Params  GetConsensusAccountsAddressDebondingDelegationsParams
}

type GetConsensusAccountsAddressDebondingDelegationsResponseObject interface {
	VisitGetConsensusAccountsAddressDebondingDelegationsResponse(w http.ResponseWriter) error
}

type GetConsensusAccountsAddressDebondingDelegations200JSONResponse DebondingDelegationList

func (response GetConsensusAccountsAddressDebondingDelegations200JSONResponse) VisitGetConsensusAccountsAddressDebondingDelegationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDebondingDelegations400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusAccountsAddressDebondingDelegations400JSONResponse) VisitGetConsensusAccountsAddressDebondingDelegationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDebondingDelegations404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusAccountsAddressDebondingDelegations404JSONResponse) VisitGetConsensusAccountsAddressDebondingDelegationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDebondingDelegations500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusAccountsAddressDebondingDelegations500JSONResponse) VisitGetConsensusAccountsAddressDebondingDelegationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDebondingDelegationsToRequestObject struct {
	Address StakingAddress `json:"address"`
	Params  GetConsensusAccountsAddressDebondingDelegationsToParams
}

type GetConsensusAccountsAddressDebondingDelegationsToResponseObject interface {
	VisitGetConsensusAccountsAddressDebondingDelegationsToResponse(w http.ResponseWriter) error
}

type GetConsensusAccountsAddressDebondingDelegationsTo200JSONResponse DebondingDelegationList

func (response GetConsensusAccountsAddressDebondingDelegationsTo200JSONResponse) VisitGetConsensusAccountsAddressDebondingDelegationsToResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDebondingDelegationsTo400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusAccountsAddressDebondingDelegationsTo400JSONResponse) VisitGetConsensusAccountsAddressDebondingDelegationsToResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDebondingDelegationsTo404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusAccountsAddressDebondingDelegationsTo404JSONResponse) VisitGetConsensusAccountsAddressDebondingDelegationsToResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDebondingDelegationsTo500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusAccountsAddressDebondingDelegationsTo500JSONResponse) VisitGetConsensusAccountsAddressDebondingDelegationsToResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDelegationsRequestObject struct {
	Address StakingAddress `json:"address"`
	Params  GetConsensusAccountsAddressDelegationsParams
}

type GetConsensusAccountsAddressDelegationsResponseObject interface {
	VisitGetConsensusAccountsAddressDelegationsResponse(w http.ResponseWriter) error
}

type GetConsensusAccountsAddressDelegations200JSONResponse DelegationList

func (response GetConsensusAccountsAddressDelegations200JSONResponse) VisitGetConsensusAccountsAddressDelegationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDelegations400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusAccountsAddressDelegations400JSONResponse) VisitGetConsensusAccountsAddressDelegationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDelegations404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusAccountsAddressDelegations404JSONResponse) VisitGetConsensusAccountsAddressDelegationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDelegations500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusAccountsAddressDelegations500JSONResponse) VisitGetConsensusAccountsAddressDelegationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDelegationsToRequestObject struct {
	Address StakingAddress `json:"address"`
	Params  GetConsensusAccountsAddressDelegationsToParams
}

type GetConsensusAccountsAddressDelegationsToResponseObject interface {
	VisitGetConsensusAccountsAddressDelegationsToResponse(w http.ResponseWriter) error
}

type GetConsensusAccountsAddressDelegationsTo200JSONResponse DelegationList

func (response GetConsensusAccountsAddressDelegationsTo200JSONResponse) VisitGetConsensusAccountsAddressDelegationsToResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDelegationsTo400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusAccountsAddressDelegationsTo400JSONResponse) VisitGetConsensusAccountsAddressDelegationsToResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDelegationsTo404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusAccountsAddressDelegationsTo404JSONResponse) VisitGetConsensusAccountsAddressDelegationsToResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDelegationsTo500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusAccountsAddressDelegationsTo500JSONResponse) VisitGetConsensusAccountsAddressDelegationsToResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusBlocksRequestObject struct {
	Params GetConsensusBlocksParams
}

type GetConsensusBlocksResponseObject interface {
	VisitGetConsensusBlocksResponse(w http.ResponseWriter) error
}

type GetConsensusBlocks200JSONResponse BlockList

func (response GetConsensusBlocks200JSONResponse) VisitGetConsensusBlocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusBlocks400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusBlocks400JSONResponse) VisitGetConsensusBlocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusBlocks404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusBlocks404JSONResponse) VisitGetConsensusBlocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusBlocks500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusBlocks500JSONResponse) VisitGetConsensusBlocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusBlocksHeightRequestObject struct {
	Height int64 `json:"height"`
}

type GetConsensusBlocksHeightResponseObject interface {
	VisitGetConsensusBlocksHeightResponse(w http.ResponseWriter) error
}

type GetConsensusBlocksHeight200JSONResponse Block

func (response GetConsensusBlocksHeight200JSONResponse) VisitGetConsensusBlocksHeightResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusBlocksHeight400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusBlocksHeight400JSONResponse) VisitGetConsensusBlocksHeightResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusBlocksHeight404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusBlocksHeight404JSONResponse) VisitGetConsensusBlocksHeightResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusBlocksHeight500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusBlocksHeight500JSONResponse) VisitGetConsensusBlocksHeightResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesRequestObject struct {
	Params GetConsensusEntitiesParams
}

type GetConsensusEntitiesResponseObject interface {
	VisitGetConsensusEntitiesResponse(w http.ResponseWriter) error
}

type GetConsensusEntities200JSONResponse EntityList

func (response GetConsensusEntities200JSONResponse) VisitGetConsensusEntitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntities400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusEntities400JSONResponse) VisitGetConsensusEntitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntities404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusEntities404JSONResponse) VisitGetConsensusEntitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntities500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusEntities500JSONResponse) VisitGetConsensusEntitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesAddressRequestObject struct {
	Address StakingAddress `json:"address"`
}

type GetConsensusEntitiesAddressResponseObject interface {
	VisitGetConsensusEntitiesAddressResponse(w http.ResponseWriter) error
}

type GetConsensusEntitiesAddress200JSONResponse Entity

func (response GetConsensusEntitiesAddress200JSONResponse) VisitGetConsensusEntitiesAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesAddress400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusEntitiesAddress400JSONResponse) VisitGetConsensusEntitiesAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesAddress404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusEntitiesAddress404JSONResponse) VisitGetConsensusEntitiesAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesAddress500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusEntitiesAddress500JSONResponse) VisitGetConsensusEntitiesAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesAddressNodesRequestObject struct {
	Address StakingAddress `json:"address"`
	Params  GetConsensusEntitiesAddressNodesParams
}

type GetConsensusEntitiesAddressNodesResponseObject interface {
	VisitGetConsensusEntitiesAddressNodesResponse(w http.ResponseWriter) error
}

type GetConsensusEntitiesAddressNodes200JSONResponse NodeList

func (response GetConsensusEntitiesAddressNodes200JSONResponse) VisitGetConsensusEntitiesAddressNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesAddressNodes400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusEntitiesAddressNodes400JSONResponse) VisitGetConsensusEntitiesAddressNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesAddressNodes404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusEntitiesAddressNodes404JSONResponse) VisitGetConsensusEntitiesAddressNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesAddressNodes500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusEntitiesAddressNodes500JSONResponse) VisitGetConsensusEntitiesAddressNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesAddressNodesNodeIdRequestObject struct {
	Address StakingAddress `json:"address"`
	NodeId  Ed25519PubKey  `json:"node_id"`
}

type GetConsensusEntitiesAddressNodesNodeIdResponseObject interface {
	VisitGetConsensusEntitiesAddressNodesNodeIdResponse(w http.ResponseWriter) error
}

type GetConsensusEntitiesAddressNodesNodeId200JSONResponse Node

func (response GetConsensusEntitiesAddressNodesNodeId200JSONResponse) VisitGetConsensusEntitiesAddressNodesNodeIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesAddressNodesNodeId400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusEntitiesAddressNodesNodeId400JSONResponse) VisitGetConsensusEntitiesAddressNodesNodeIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesAddressNodesNodeId404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusEntitiesAddressNodesNodeId404JSONResponse) VisitGetConsensusEntitiesAddressNodesNodeIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesAddressNodesNodeId500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusEntitiesAddressNodesNodeId500JSONResponse) VisitGetConsensusEntitiesAddressNodesNodeIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEpochsRequestObject struct {
	Params GetConsensusEpochsParams
}

type GetConsensusEpochsResponseObject interface {
	VisitGetConsensusEpochsResponse(w http.ResponseWriter) error
}

type GetConsensusEpochs200JSONResponse EpochList

func (response GetConsensusEpochs200JSONResponse) VisitGetConsensusEpochsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEpochs400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusEpochs400JSONResponse) VisitGetConsensusEpochsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEpochs404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusEpochs404JSONResponse) VisitGetConsensusEpochsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEpochs500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusEpochs500JSONResponse) VisitGetConsensusEpochsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEpochsEpochRequestObject struct {
	Epoch int64 `json:"epoch"`
}

type GetConsensusEpochsEpochResponseObject interface {
	VisitGetConsensusEpochsEpochResponse(w http.ResponseWriter) error
}

type GetConsensusEpochsEpoch200JSONResponse Epoch

func (response GetConsensusEpochsEpoch200JSONResponse) VisitGetConsensusEpochsEpochResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEpochsEpoch400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusEpochsEpoch400JSONResponse) VisitGetConsensusEpochsEpochResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEpochsEpoch404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusEpochsEpoch404JSONResponse) VisitGetConsensusEpochsEpochResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEpochsEpoch500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusEpochsEpoch500JSONResponse) VisitGetConsensusEpochsEpochResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEventsRequestObject struct {
	Params GetConsensusEventsParams
}

type GetConsensusEventsResponseObject interface {
	VisitGetConsensusEventsResponse(w http.ResponseWriter) error
}

type GetConsensusEvents200JSONResponse ConsensusEventList

func (response GetConsensusEvents200JSONResponse) VisitGetConsensusEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEvents400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusEvents400JSONResponse) VisitGetConsensusEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEvents404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusEvents404JSONResponse) VisitGetConsensusEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEvents500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusEvents500JSONResponse) VisitGetConsensusEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposalsRequestObject struct {
	Params GetConsensusProposalsParams
}

type GetConsensusProposalsResponseObject interface {
	VisitGetConsensusProposalsResponse(w http.ResponseWriter) error
}

type GetConsensusProposals200JSONResponse ProposalList

func (response GetConsensusProposals200JSONResponse) VisitGetConsensusProposalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposals400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusProposals400JSONResponse) VisitGetConsensusProposalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposals404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusProposals404JSONResponse) VisitGetConsensusProposalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposals500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusProposals500JSONResponse) VisitGetConsensusProposalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposalsProposalIdRequestObject struct {
	ProposalId uint64 `json:"proposal_id"`
}

type GetConsensusProposalsProposalIdResponseObject interface {
	VisitGetConsensusProposalsProposalIdResponse(w http.ResponseWriter) error
}

type GetConsensusProposalsProposalId200JSONResponse Proposal

func (response GetConsensusProposalsProposalId200JSONResponse) VisitGetConsensusProposalsProposalIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposalsProposalId400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusProposalsProposalId400JSONResponse) VisitGetConsensusProposalsProposalIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposalsProposalId404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusProposalsProposalId404JSONResponse) VisitGetConsensusProposalsProposalIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposalsProposalId500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusProposalsProposalId500JSONResponse) VisitGetConsensusProposalsProposalIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposalsProposalIdVotesRequestObject struct {
	ProposalId uint64 `json:"proposal_id"`
	Params     GetConsensusProposalsProposalIdVotesParams
}

type GetConsensusProposalsProposalIdVotesResponseObject interface {
	VisitGetConsensusProposalsProposalIdVotesResponse(w http.ResponseWriter) error
}

type GetConsensusProposalsProposalIdVotes200JSONResponse ProposalVotes

func (response GetConsensusProposalsProposalIdVotes200JSONResponse) VisitGetConsensusProposalsProposalIdVotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposalsProposalIdVotes400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusProposalsProposalIdVotes400JSONResponse) VisitGetConsensusProposalsProposalIdVotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposalsProposalIdVotes404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusProposalsProposalIdVotes404JSONResponse) VisitGetConsensusProposalsProposalIdVotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposalsProposalIdVotes500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusProposalsProposalIdVotes500JSONResponse) VisitGetConsensusProposalsProposalIdVotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusRoothashMessagesRequestObject struct {
	Params GetConsensusRoothashMessagesParams
}

type GetConsensusRoothashMessagesResponseObject interface {
	VisitGetConsensusRoothashMessagesResponse(w http.ResponseWriter) error
}

type GetConsensusRoothashMessages200JSONResponse RoothashMessageList

func (response GetConsensusRoothashMessages200JSONResponse) VisitGetConsensusRoothashMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusRoothashMessages400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusRoothashMessages400JSONResponse) VisitGetConsensusRoothashMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusRoothashMessages404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusRoothashMessages404JSONResponse) VisitGetConsensusRoothashMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusRoothashMessages500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusRoothashMessages500JSONResponse) VisitGetConsensusRoothashMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusTransactionsRequestObject struct {
	Params GetConsensusTransactionsParams
}

type GetConsensusTransactionsResponseObject interface {
	VisitGetConsensusTransactionsResponse(w http.ResponseWriter) error
}

type GetConsensusTransactions200JSONResponse TransactionList

func (response GetConsensusTransactions200JSONResponse) VisitGetConsensusTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusTransactions400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusTransactions400JSONResponse) VisitGetConsensusTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusTransactions404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusTransactions404JSONResponse) VisitGetConsensusTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusTransactions500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusTransactions500JSONResponse) VisitGetConsensusTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusTransactionsTxHashRequestObject struct {
	TxHash string `json:"tx_hash"`
}

type GetConsensusTransactionsTxHashResponseObject interface {
	VisitGetConsensusTransactionsTxHashResponse(w http.ResponseWriter) error
}

type GetConsensusTransactionsTxHash200JSONResponse Transaction

func (response GetConsensusTransactionsTxHash200JSONResponse) VisitGetConsensusTransactionsTxHashResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusTransactionsTxHash400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusTransactionsTxHash400JSONResponse) VisitGetConsensusTransactionsTxHashResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusTransactionsTxHash404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusTransactionsTxHash404JSONResponse) VisitGetConsensusTransactionsTxHashResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusTransactionsTxHash500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusTransactionsTxHash500JSONResponse) VisitGetConsensusTransactionsTxHashResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusValidatorsRequestObject struct {
	Params GetConsensusValidatorsParams
}

type GetConsensusValidatorsResponseObject interface {
	VisitGetConsensusValidatorsResponse(w http.ResponseWriter) error
}

type GetConsensusValidators200JSONResponse ValidatorList

func (response GetConsensusValidators200JSONResponse) VisitGetConsensusValidatorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusValidators400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusValidators400JSONResponse) VisitGetConsensusValidatorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusValidators404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusValidators404JSONResponse) VisitGetConsensusValidatorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusValidators500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusValidators500JSONResponse) VisitGetConsensusValidatorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusValidatorsAddressRequestObject struct {
	Address StakingAddress `json:"address"`
}

type GetConsensusValidatorsAddressResponseObject interface {
	VisitGetConsensusValidatorsAddressResponse(w http.ResponseWriter) error
}

type GetConsensusValidatorsAddress200JSONResponse Validator

func (response GetConsensusValidatorsAddress200JSONResponse) VisitGetConsensusValidatorsAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusValidatorsAddress400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusValidatorsAddress400JSONResponse) VisitGetConsensusValidatorsAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusValidatorsAddress404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusValidatorsAddress404JSONResponse) VisitGetConsensusValidatorsAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusValidatorsAddress500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusValidatorsAddress500JSONResponse) VisitGetConsensusValidatorsAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusValidatorsAddressHistoryRequestObject struct {
	Address StakingAddress `json:"address"`
	Params  GetConsensusValidatorsAddressHistoryParams
}

type GetConsensusValidatorsAddressHistoryResponseObject interface {
	VisitGetConsensusValidatorsAddressHistoryResponse(w http.ResponseWriter) error
}

type GetConsensusValidatorsAddressHistory200JSONResponse ValidatorHistory

func (response GetConsensusValidatorsAddressHistory200JSONResponse) VisitGetConsensusValidatorsAddressHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusValidatorsAddressHistory400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetConsensusValidatorsAddressHistory400JSONResponse) VisitGetConsensusValidatorsAddressHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusValidatorsAddressHistory404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetConsensusValidatorsAddressHistory404JSONResponse) VisitGetConsensusValidatorsAddressHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusValidatorsAddressHistory500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetConsensusValidatorsAddressHistory500JSONResponse) VisitGetConsensusValidatorsAddressHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetLayerStatsActiveAccountsRequestObject struct {
	Layer  Layer `json:"layer"`
	Params GetLayerStatsActiveAccountsParams
}

type GetLayerStatsActiveAccountsResponseObject interface {
	VisitGetLayerStatsActiveAccountsResponse(w http.ResponseWriter) error
}

type GetLayerStatsActiveAccounts200JSONResponse ActiveAccountsList

func (response GetLayerStatsActiveAccounts200JSONResponse) VisitGetLayerStatsActiveAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLayerStatsActiveAccounts400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetLayerStatsActiveAccounts400JSONResponse) VisitGetLayerStatsActiveAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetLayerStatsActiveAccounts404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetLayerStatsActiveAccounts404JSONResponse) VisitGetLayerStatsActiveAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetLayerStatsActiveAccounts500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetLayerStatsActiveAccounts500JSONResponse) VisitGetLayerStatsActiveAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetLayerStatsTxVolumeRequestObject struct {
	Layer  Layer `json:"layer"`
	Params GetLayerStatsTxVolumeParams
}

type GetLayerStatsTxVolumeResponseObject interface {
	VisitGetLayerStatsTxVolumeResponse(w http.ResponseWriter) error
}

type GetLayerStatsTxVolume200JSONResponse TxVolumeList

func (response GetLayerStatsTxVolume200JSONResponse) VisitGetLayerStatsTxVolumeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLayerStatsTxVolume400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetLayerStatsTxVolume400JSONResponse) VisitGetLayerStatsTxVolumeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetLayerStatsTxVolume404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetLayerStatsTxVolume404JSONResponse) VisitGetLayerStatsTxVolumeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetLayerStatsTxVolume500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetLayerStatsTxVolume500JSONResponse) VisitGetLayerStatsTxVolumeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeAccountsAddressRequestObject struct {
	Runtime Runtime           `json:"runtime"`
	Address EthOrOasisAddress `json:"address"`
}

type GetRuntimeAccountsAddressResponseObject interface {
	VisitGetRuntimeAccountsAddressResponse(w http.ResponseWriter) error
}

type GetRuntimeAccountsAddress200JSONResponse RuntimeAccount

func (response GetRuntimeAccountsAddress200JSONResponse) VisitGetRuntimeAccountsAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeAccountsAddress400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetRuntimeAccountsAddress400JSONResponse) VisitGetRuntimeAccountsAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeAccountsAddress404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetRuntimeAccountsAddress404JSONResponse) VisitGetRuntimeAccountsAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeAccountsAddress500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetRuntimeAccountsAddress500JSONResponse) VisitGetRuntimeAccountsAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeAccountsAddressNftsRequestObject struct {
	Runtime Runtime           `json:"runtime"`
	Address EthOrOasisAddress `json:"address"`
	Params  GetRuntimeAccountsAddressNftsParams
}

type GetRuntimeAccountsAddressNftsResponseObject interface {
	VisitGetRuntimeAccountsAddressNftsResponse(w http.ResponseWriter) error
}

type GetRuntimeAccountsAddressNfts200JSONResponse EvmNftList

func (response GetRuntimeAccountsAddressNfts200JSONResponse) VisitGetRuntimeAccountsAddressNftsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeAccountsAddressNfts400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetRuntimeAccountsAddressNfts400JSONResponse) VisitGetRuntimeAccountsAddressNftsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeAccountsAddressNfts404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetRuntimeAccountsAddressNfts404JSONResponse) VisitGetRuntimeAccountsAddressNftsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeAccountsAddressNfts500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetRuntimeAccountsAddressNfts500JSONResponse) VisitGetRuntimeAccountsAddressNftsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeBlocksRequestObject struct {
	Runtime Runtime `json:"runtime"`
	Params  GetRuntimeBlocksParams
}

type GetRuntimeBlocksResponseObject interface {
	VisitGetRuntimeBlocksResponse(w http.ResponseWriter) error
}

type GetRuntimeBlocks200JSONResponse RuntimeBlockList

func (response GetRuntimeBlocks200JSONResponse) VisitGetRuntimeBlocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeBlocks400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetRuntimeBlocks400JSONResponse) VisitGetRuntimeBlocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeBlocks404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetRuntimeBlocks404JSONResponse) VisitGetRuntimeBlocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeBlocks500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetRuntimeBlocks500JSONResponse) VisitGetRuntimeBlocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEventsRequestObject struct {
	Runtime Runtime `json:"runtime"`
	Params  GetRuntimeEventsParams
}

type GetRuntimeEventsResponseObject interface {
	VisitGetRuntimeEventsResponse(w http.ResponseWriter) error
}

type GetRuntimeEvents200JSONResponse RuntimeEventList

func (response GetRuntimeEvents200JSONResponse) VisitGetRuntimeEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvents400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetRuntimeEvents400JSONResponse) VisitGetRuntimeEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvents404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetRuntimeEvents404JSONResponse) VisitGetRuntimeEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvents500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetRuntimeEvents500JSONResponse) VisitGetRuntimeEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvmTokensRequestObject struct {
	Runtime Runtime `json:"runtime"`
	Params  GetRuntimeEvmTokensParams
}

type GetRuntimeEvmTokensResponseObject interface {
	VisitGetRuntimeEvmTokensResponse(w http.ResponseWriter) error
}

type GetRuntimeEvmTokens200JSONResponse EvmTokenList

func (response GetRuntimeEvmTokens200JSONResponse) VisitGetRuntimeEvmTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvmTokens400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetRuntimeEvmTokens400JSONResponse) VisitGetRuntimeEvmTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvmTokens404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetRuntimeEvmTokens404JSONResponse) VisitGetRuntimeEvmTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvmTokens500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetRuntimeEvmTokens500JSONResponse) VisitGetRuntimeEvmTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvmTokensAddressRequestObject struct {
	Runtime Runtime           `json:"runtime"`
	Address EthOrOasisAddress `json:"address"`
}

type GetRuntimeEvmTokensAddressResponseObject interface {
	VisitGetRuntimeEvmTokensAddressResponse(w http.ResponseWriter) error
}

type GetRuntimeEvmTokensAddress200JSONResponse EvmToken

func (response GetRuntimeEvmTokensAddress200JSONResponse) VisitGetRuntimeEvmTokensAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvmTokensAddress400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetRuntimeEvmTokensAddress400JSONResponse) VisitGetRuntimeEvmTokensAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvmTokensAddress404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetRuntimeEvmTokensAddress404JSONResponse) VisitGetRuntimeEvmTokensAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvmTokensAddress500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetRuntimeEvmTokensAddress500JSONResponse) VisitGetRuntimeEvmTokensAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvmTokensAddressHoldersRequestObject struct {
	Runtime Runtime           `json:"runtime"`
	Address EthOrOasisAddress `json:"address"`
	Params  GetRuntimeEvmTokensAddressHoldersParams
}

type GetRuntimeEvmTokensAddressHoldersResponseObject interface {
	VisitGetRuntimeEvmTokensAddressHoldersResponse(w http.ResponseWriter) error
}

type GetRuntimeEvmTokensAddressHolders200JSONResponse TokenHolderList

func (response GetRuntimeEvmTokensAddressHolders200JSONResponse) VisitGetRuntimeEvmTokensAddressHoldersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvmTokensAddressHolders400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetRuntimeEvmTokensAddressHolders400JSONResponse) VisitGetRuntimeEvmTokensAddressHoldersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvmTokensAddressHolders404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetRuntimeEvmTokensAddressHolders404JSONResponse) VisitGetRuntimeEvmTokensAddressHoldersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvmTokensAddressHolders500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetRuntimeEvmTokensAddressHolders500JSONResponse) VisitGetRuntimeEvmTokensAddressHoldersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvmTokensAddressNftsRequestObject struct {
	Runtime Runtime           `json:"runtime"`
	Address EthOrOasisAddress `json:"address"`
	Params  GetRuntimeEvmTokensAddressNftsParams
}

type GetRuntimeEvmTokensAddressNftsResponseObject interface {
	VisitGetRuntimeEvmTokensAddressNftsResponse(w http.ResponseWriter) error
}

type GetRuntimeEvmTokensAddressNfts200JSONResponse EvmNftList

func (response GetRuntimeEvmTokensAddressNfts200JSONResponse) VisitGetRuntimeEvmTokensAddressNftsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvmTokensAddressNfts400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetRuntimeEvmTokensAddressNfts400JSONResponse) VisitGetRuntimeEvmTokensAddressNftsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvmTokensAddressNfts404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetRuntimeEvmTokensAddressNfts404JSONResponse) VisitGetRuntimeEvmTokensAddressNftsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvmTokensAddressNfts500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetRuntimeEvmTokensAddressNfts500JSONResponse) VisitGetRuntimeEvmTokensAddressNftsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvmTokensAddressNftsIdRequestObject struct {
	Runtime Runtime           `json:"runtime"`
	Address EthOrOasisAddress `json:"address"`
	Id      TextBigInt        `json:"id"`
}

type GetRuntimeEvmTokensAddressNftsIdResponseObject interface {
	VisitGetRuntimeEvmTokensAddressNftsIdResponse(w http.ResponseWriter) error
}

type GetRuntimeEvmTokensAddressNftsId200JSONResponse EvmNft

func (response GetRuntimeEvmTokensAddressNftsId200JSONResponse) VisitGetRuntimeEvmTokensAddressNftsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvmTokensAddressNftsId400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetRuntimeEvmTokensAddressNftsId400JSONResponse) VisitGetRuntimeEvmTokensAddressNftsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvmTokensAddressNftsId404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetRuntimeEvmTokensAddressNftsId404JSONResponse) VisitGetRuntimeEvmTokensAddressNftsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeEvmTokensAddressNftsId500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetRuntimeEvmTokensAddressNftsId500JSONResponse) VisitGetRuntimeEvmTokensAddressNftsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeStatusRequestObject struct {
	Runtime Runtime `json:"runtime"`
}

type GetRuntimeStatusResponseObject interface {
	VisitGetRuntimeStatusResponse(w http.ResponseWriter) error
}

type GetRuntimeStatus200JSONResponse RuntimeStatus

func (response GetRuntimeStatus200JSONResponse) VisitGetRuntimeStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeStatus400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetRuntimeStatus400JSONResponse) VisitGetRuntimeStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeStatus404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetRuntimeStatus404JSONResponse) VisitGetRuntimeStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeStatus500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetRuntimeStatus500JSONResponse) VisitGetRuntimeStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeTransactionsRequestObject struct {
	Runtime Runtime `json:"runtime"`
	Params  GetRuntimeTransactionsParams
}

type GetRuntimeTransactionsResponseObject interface {
	VisitGetRuntimeTransactionsResponse(w http.ResponseWriter) error
}

type GetRuntimeTransactions200JSONResponse RuntimeTransactionList

func (response GetRuntimeTransactions200JSONResponse) VisitGetRuntimeTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeTransactions400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetRuntimeTransactions400JSONResponse) VisitGetRuntimeTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeTransactions404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetRuntimeTransactions404JSONResponse) VisitGetRuntimeTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeTransactions500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetRuntimeTransactions500JSONResponse) VisitGetRuntimeTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeTransactionsTxHashRequestObject struct {
	Runtime Runtime `json:"runtime"`
	TxHash  string  `json:"tx_hash"`
}

type GetRuntimeTransactionsTxHashResponseObject interface {
	VisitGetRuntimeTransactionsTxHashResponse(w http.ResponseWriter) error
}

type GetRuntimeTransactionsTxHash200JSONResponse RuntimeTransactionList

func (response GetRuntimeTransactionsTxHash200JSONResponse) VisitGetRuntimeTransactionsTxHashResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeTransactionsTxHash400JSONResponse struct{ HumanReadableErrorJSONResponse }

func (response GetRuntimeTransactionsTxHash400JSONResponse) VisitGetRuntimeTransactionsTxHashResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeTransactionsTxHash404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetRuntimeTransactionsTxHash404JSONResponse) VisitGetRuntimeTransactionsTxHashResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRuntimeTransactionsTxHash500JSONResponse struct {
	// Msg An error message.
	Msg string `json:"msg"`
}

func (response GetRuntimeTransactionsTxHash500JSONResponse) VisitGetRuntimeTransactionsTxHashResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Returns the status of indexing.
	// (GET /)
	GetStatus(ctx context.Context, request GetStatusRequestObject) (GetStatusResponseObject, error)
	// Returns a list of consensus layer accounts.
	// Note that for performance reasons, the info returned by this endpoint
	// may be slightly stale (<2 minutes). For the most up-to-date account state,
	// query the single-account endpoint.
	// (GET /consensus/accounts)
	GetConsensusAccounts(ctx context.Context, request GetConsensusAccountsRequestObject) (GetConsensusAccountsResponseObject, error)
	// Returns a consensus layer account.
	// (GET /consensus/accounts/{address})
	GetConsensusAccountsAddress(ctx context.Context, request GetConsensusAccountsAddressRequestObject) (GetConsensusAccountsAddressResponseObject, error)
	// Returns an account's debonding delegations.
	// (GET /consensus/accounts/{address}/debonding_delegations)
	GetConsensusAccountsAddressDebondingDelegations(ctx context.Context, request GetConsensusAccountsAddressDebondingDelegationsRequestObject) (GetConsensusAccountsAddressDebondingDelegationsResponseObject, error)
	// Returns a list of debonding delegations to an account.
	// (GET /consensus/accounts/{address}/debonding_delegations_to)
	GetConsensusAccountsAddressDebondingDelegationsTo(ctx context.Context, request GetConsensusAccountsAddressDebondingDelegationsToRequestObject) (GetConsensusAccountsAddressDebondingDelegationsToResponseObject, error)
	// Returns an account's delegations.
	// (GET /consensus/accounts/{address}/delegations)
	GetConsensusAccountsAddressDelegations(ctx context.Context, request GetConsensusAccountsAddressDelegationsRequestObject) (GetConsensusAccountsAddressDelegationsResponseObject, error)
	// Returns a list of delegations to an account.
	// (GET /consensus/accounts/{address}/delegations_to)
	GetConsensusAccountsAddressDelegationsTo(ctx context.Context, request GetConsensusAccountsAddressDelegationsToRequestObject) (GetConsensusAccountsAddressDelegationsToResponseObject, error)
	// Returns a list of consensus blocks, sorted from most to least recent.
	// (GET /consensus/blocks)
	GetConsensusBlocks(ctx context.Context, request GetConsensusBlocksRequestObject) (GetConsensusBlocksResponseObject, error)
	// Returns a consensus block.
	// (GET /consensus/blocks/{height})
	GetConsensusBlocksHeight(ctx context.Context, request GetConsensusBlocksHeightRequestObject) (GetConsensusBlocksHeightResponseObject, error)
	// Returns a list of entities registered at the consensus layer.
	// (GET /consensus/entities)
	GetConsensusEntities(ctx context.Context, request GetConsensusEntitiesRequestObject) (GetConsensusEntitiesResponseObject, error)
	// Returns an entity registered at the consensus layer.
	// (GET /consensus/entities/{address})
	GetConsensusEntitiesAddress(ctx context.Context, request GetConsensusEntitiesAddressRequestObject) (GetConsensusEntitiesAddressResponseObject, error)
	// Returns a list of nodes registered at the consensus layer.
	// (GET /consensus/entities/{address}/nodes)
	GetConsensusEntitiesAddressNodes(ctx context.Context, request GetConsensusEntitiesAddressNodesRequestObject) (GetConsensusEntitiesAddressNodesResponseObject, error)
	// Returns a node registered at the consensus layer.
	// (GET /consensus/entities/{address}/nodes/{node_id})
	GetConsensusEntitiesAddressNodesNodeId(ctx context.Context, request GetConsensusEntitiesAddressNodesNodeIdRequestObject) (GetConsensusEntitiesAddressNodesNodeIdResponseObject, error)
	// Returns a list of consensus epochs.
	// (GET /consensus/epochs)
	GetConsensusEpochs(ctx context.Context, request GetConsensusEpochsRequestObject) (GetConsensusEpochsResponseObject, error)
	// Returns a consensus epoch.
	// (GET /consensus/epochs/{epoch})
	GetConsensusEpochsEpoch(ctx context.Context, request GetConsensusEpochsEpochRequestObject) (GetConsensusEpochsEpochResponseObject, error)
	// Returns a list of consensus events.
	// (GET /consensus/events)
	GetConsensusEvents(ctx context.Context, request GetConsensusEventsRequestObject) (GetConsensusEventsResponseObject, error)
	// Returns a list of governance proposals.
	// (GET /consensus/proposals)
	GetConsensusProposals(ctx context.Context, request GetConsensusProposalsRequestObject) (GetConsensusProposalsResponseObject, error)
	// Returns a governance proposal.
	// (GET /consensus/proposals/{proposal_id})
	GetConsensusProposalsProposalId(ctx context.Context, request GetConsensusProposalsProposalIdRequestObject) (GetConsensusProposalsProposalIdResponseObject, error)
	// Returns a list of votes for a governance proposal.
	// (GET /consensus/proposals/{proposal_id}/votes)
	GetConsensusProposalsProposalIdVotes(ctx context.Context, request GetConsensusProposalsProposalIdVotesRequestObject) (GetConsensusProposalsProposalIdVotesResponseObject, error)

	// (GET /consensus/roothash_messages)
	GetConsensusRoothashMessages(ctx context.Context, request GetConsensusRoothashMessagesRequestObject) (GetConsensusRoothashMessagesResponseObject, error)
	// Returns a list of consensus transactions.
	// (GET /consensus/transactions)
	GetConsensusTransactions(ctx context.Context, request GetConsensusTransactionsRequestObject) (GetConsensusTransactionsResponseObject, error)
	// Returns a consensus transaction.
	// (GET /consensus/transactions/{tx_hash})
	GetConsensusTransactionsTxHash(ctx context.Context, request GetConsensusTransactionsTxHashRequestObject) (GetConsensusTransactionsTxHashResponseObject, error)
	// Returns a list of validators registered at the consensus layer (the list includes all registered entities, even those without a currently active validator node).
	// (GET /consensus/validators)
	GetConsensusValidators(ctx context.Context, request GetConsensusValidatorsRequestObject) (GetConsensusValidatorsResponseObject, error)
	// Returns a validator registered at the consensus layer.
	// (GET /consensus/validators/{address})
	GetConsensusValidatorsAddress(ctx context.Context, request GetConsensusValidatorsAddressRequestObject) (GetConsensusValidatorsAddressResponseObject, error)
	// Returns historical information for a single validator.
	// (GET /consensus/validators/{address}/history)
	GetConsensusValidatorsAddressHistory(ctx context.Context, request GetConsensusValidatorsAddressHistoryRequestObject) (GetConsensusValidatorsAddressHistoryResponseObject, error)
	// Returns a (sliding) timeline of the recorded daily unique active accounts for
	// either consensus or one of the paratimes.
	// (GET /{layer}/stats/active_accounts)
	GetLayerStatsActiveAccounts(ctx context.Context, request GetLayerStatsActiveAccountsRequestObject) (GetLayerStatsActiveAccountsResponseObject, error)
	// Returns a timeline of the transaction volume at the chosen granularity,
	// for either consensus or one of the paratimes.
	// (GET /{layer}/stats/tx_volume)
	GetLayerStatsTxVolume(ctx context.Context, request GetLayerStatsTxVolumeRequestObject) (GetLayerStatsTxVolumeResponseObject, error)
	// Returns a runtime account.
	// (GET /{runtime}/accounts/{address})
	GetRuntimeAccountsAddress(ctx context.Context, request GetRuntimeAccountsAddressRequestObject) (GetRuntimeAccountsAddressResponseObject, error)
	// Returns the list of non-fungible token (NFT) instances owned by an account.
	// (GET /{runtime}/accounts/{address}/nfts)
	GetRuntimeAccountsAddressNfts(ctx context.Context, request GetRuntimeAccountsAddressNftsRequestObject) (GetRuntimeAccountsAddressNftsResponseObject, error)
	// Returns a list of Runtime blocks.
	// (GET /{runtime}/blocks)
	GetRuntimeBlocks(ctx context.Context, request GetRuntimeBlocksRequestObject) (GetRuntimeBlocksResponseObject, error)
	// Returns a list of runtime events.
	// (GET /{runtime}/events)
	GetRuntimeEvents(ctx context.Context, request GetRuntimeEventsRequestObject) (GetRuntimeEventsResponseObject, error)
	// Returns a list of EVM (ERC-20, ...) tokens on the runtime.
	// (GET /{runtime}/evm_tokens)
	GetRuntimeEvmTokens(ctx context.Context, request GetRuntimeEvmTokensRequestObject) (GetRuntimeEvmTokensResponseObject, error)
	// Returns info on an EVM (ERC-20, ...) token on the runtime.
	// (GET /{runtime}/evm_tokens/{address})
	GetRuntimeEvmTokensAddress(ctx context.Context, request GetRuntimeEvmTokensAddressRequestObject) (GetRuntimeEvmTokensAddressResponseObject, error)
	// Returns the list of holders of an EVM (ERC-20, ...) token.
	// This endpoint does not verify that `address` is actually an EVM token; if it is not, it will simply return an empty list.
	// (GET /{runtime}/evm_tokens/{address}/holders)
	GetRuntimeEvmTokensAddressHolders(ctx context.Context, request GetRuntimeEvmTokensAddressHoldersRequestObject) (GetRuntimeEvmTokensAddressHoldersResponseObject, error)
	// Returns the list of non-fungible token (NFT) instances of an EVM (ERC-721, ...) token.
	// This endpoint does not verify that `address` is actually an EVM token; if it is not, it will simply return an empty list.
	// (GET /{runtime}/evm_tokens/{address}/nfts)
	GetRuntimeEvmTokensAddressNfts(ctx context.Context, request GetRuntimeEvmTokensAddressNftsRequestObject) (GetRuntimeEvmTokensAddressNftsResponseObject, error)
	// Returns the non-fungible token (NFT) instance of an EVM (ERC-721, ...) token.
	// (GET /{runtime}/evm_tokens/{address}/nfts/{id})
	GetRuntimeEvmTokensAddressNftsId(ctx context.Context, request GetRuntimeEvmTokensAddressNftsIdRequestObject) (GetRuntimeEvmTokensAddressNftsIdResponseObject, error)
	// Returns the runtime status.
	// (GET /{runtime}/status)
	GetRuntimeStatus(ctx context.Context, request GetRuntimeStatusRequestObject) (GetRuntimeStatusResponseObject, error)
	// Returns a list of Runtime transactions.
	// (GET /{runtime}/transactions)
	GetRuntimeTransactions(ctx context.Context, request GetRuntimeTransactionsRequestObject) (GetRuntimeTransactionsResponseObject, error)
	// Returns runtime transactions with the given transaction hash.
	// (GET /{runtime}/transactions/{tx_hash})
	GetRuntimeTransactionsTxHash(ctx context.Context, request GetRuntimeTransactionsTxHashRequestObject) (GetRuntimeTransactionsTxHashResponseObject, error)
}

type StrictHandlerFunc func(ctx context.Context, w http.ResponseWriter, r *http.Request, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetStatus operation middleware
func (sh *strictHandler) GetStatus(w http.ResponseWriter, r *http.Request) {
	var request GetStatusRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetStatus(ctx, request.(GetStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetStatusResponseObject); ok {
		if err := validResponse.VisitGetStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusAccounts operation middleware
func (sh *strictHandler) GetConsensusAccounts(w http.ResponseWriter, r *http.Request, params GetConsensusAccountsParams) {
	var request GetConsensusAccountsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusAccounts(ctx, request.(GetConsensusAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusAccounts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusAccountsResponseObject); ok {
		if err := validResponse.VisitGetConsensusAccountsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusAccountsAddress operation middleware
func (sh *strictHandler) GetConsensusAccountsAddress(w http.ResponseWriter, r *http.Request, address StakingAddress) {
	var request GetConsensusAccountsAddressRequestObject

	request.Address = address

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusAccountsAddress(ctx, request.(GetConsensusAccountsAddressRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusAccountsAddress")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusAccountsAddressResponseObject); ok {
		if err := validResponse.VisitGetConsensusAccountsAddressResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusAccountsAddressDebondingDelegations operation middleware
func (sh *strictHandler) GetConsensusAccountsAddressDebondingDelegations(w http.ResponseWriter, r *http.Request, address StakingAddress, params GetConsensusAccountsAddressDebondingDelegationsParams) {
	var request GetConsensusAccountsAddressDebondingDelegationsRequestObject

	request.Address = address
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusAccountsAddressDebondingDelegations(ctx, request.(GetConsensusAccountsAddressDebondingDelegationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusAccountsAddressDebondingDelegations")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusAccountsAddressDebondingDelegationsResponseObject); ok {
		if err := validResponse.VisitGetConsensusAccountsAddressDebondingDelegationsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusAccountsAddressDebondingDelegationsTo operation middleware
func (sh *strictHandler) GetConsensusAccountsAddressDebondingDelegationsTo(w http.ResponseWriter, r *http.Request, address StakingAddress, params GetConsensusAccountsAddressDebondingDelegationsToParams) {
	var request GetConsensusAccountsAddressDebondingDelegationsToRequestObject

	request.Address = address
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusAccountsAddressDebondingDelegationsTo(ctx, request.(GetConsensusAccountsAddressDebondingDelegationsToRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusAccountsAddressDebondingDelegationsTo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusAccountsAddressDebondingDelegationsToResponseObject); ok {
		if err := validResponse.VisitGetConsensusAccountsAddressDebondingDelegationsToResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusAccountsAddressDelegations operation middleware
func (sh *strictHandler) GetConsensusAccountsAddressDelegations(w http.ResponseWriter, r *http.Request, address StakingAddress, params GetConsensusAccountsAddressDelegationsParams) {
	var request GetConsensusAccountsAddressDelegationsRequestObject

	request.Address = address
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusAccountsAddressDelegations(ctx, request.(GetConsensusAccountsAddressDelegationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusAccountsAddressDelegations")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusAccountsAddressDelegationsResponseObject); ok {
		if err := validResponse.VisitGetConsensusAccountsAddressDelegationsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusAccountsAddressDelegationsTo operation middleware
func (sh *strictHandler) GetConsensusAccountsAddressDelegationsTo(w http.ResponseWriter, r *http.Request, address StakingAddress, params GetConsensusAccountsAddressDelegationsToParams) {
	var request GetConsensusAccountsAddressDelegationsToRequestObject

	request.Address = address
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusAccountsAddressDelegationsTo(ctx, request.(GetConsensusAccountsAddressDelegationsToRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusAccountsAddressDelegationsTo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusAccountsAddressDelegationsToResponseObject); ok {
		if err := validResponse.VisitGetConsensusAccountsAddressDelegationsToResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusBlocks operation middleware
func (sh *strictHandler) GetConsensusBlocks(w http.ResponseWriter, r *http.Request, params GetConsensusBlocksParams) {
	var request GetConsensusBlocksRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusBlocks(ctx, request.(GetConsensusBlocksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusBlocks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusBlocksResponseObject); ok {
		if err := validResponse.VisitGetConsensusBlocksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusBlocksHeight operation middleware
func (sh *strictHandler) GetConsensusBlocksHeight(w http.ResponseWriter, r *http.Request, height int64) {
	var request GetConsensusBlocksHeightRequestObject

	request.Height = height

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusBlocksHeight(ctx, request.(GetConsensusBlocksHeightRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusBlocksHeight")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusBlocksHeightResponseObject); ok {
		if err := validResponse.VisitGetConsensusBlocksHeightResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusEntities operation middleware
func (sh *strictHandler) GetConsensusEntities(w http.ResponseWriter, r *http.Request, params GetConsensusEntitiesParams) {
	var request GetConsensusEntitiesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusEntities(ctx, request.(GetConsensusEntitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusEntities")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusEntitiesResponseObject); ok {
		if err := validResponse.VisitGetConsensusEntitiesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusEntitiesAddress operation middleware
func (sh *strictHandler) GetConsensusEntitiesAddress(w http.ResponseWriter, r *http.Request, address StakingAddress) {
	var request GetConsensusEntitiesAddressRequestObject

	request.Address = address

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusEntitiesAddress(ctx, request.(GetConsensusEntitiesAddressRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusEntitiesAddress")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusEntitiesAddressResponseObject); ok {
		if err := validResponse.VisitGetConsensusEntitiesAddressResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusEntitiesAddressNodes operation middleware
func (sh *strictHandler) GetConsensusEntitiesAddressNodes(w http.ResponseWriter, r *http.Request, address StakingAddress, params GetConsensusEntitiesAddressNodesParams) {
	var request GetConsensusEntitiesAddressNodesRequestObject

	request.Address = address
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusEntitiesAddressNodes(ctx, request.(GetConsensusEntitiesAddressNodesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusEntitiesAddressNodes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusEntitiesAddressNodesResponseObject); ok {
		if err := validResponse.VisitGetConsensusEntitiesAddressNodesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusEntitiesAddressNodesNodeId operation middleware
func (sh *strictHandler) GetConsensusEntitiesAddressNodesNodeId(w http.ResponseWriter, r *http.Request, address StakingAddress, nodeId Ed25519PubKey) {
	var request GetConsensusEntitiesAddressNodesNodeIdRequestObject

	request.Address = address
	request.NodeId = nodeId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusEntitiesAddressNodesNodeId(ctx, request.(GetConsensusEntitiesAddressNodesNodeIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusEntitiesAddressNodesNodeId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusEntitiesAddressNodesNodeIdResponseObject); ok {
		if err := validResponse.VisitGetConsensusEntitiesAddressNodesNodeIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusEpochs operation middleware
func (sh *strictHandler) GetConsensusEpochs(w http.ResponseWriter, r *http.Request, params GetConsensusEpochsParams) {
	var request GetConsensusEpochsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusEpochs(ctx, request.(GetConsensusEpochsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusEpochs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusEpochsResponseObject); ok {
		if err := validResponse.VisitGetConsensusEpochsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusEpochsEpoch operation middleware
func (sh *strictHandler) GetConsensusEpochsEpoch(w http.ResponseWriter, r *http.Request, epoch int64) {
	var request GetConsensusEpochsEpochRequestObject

	request.Epoch = epoch

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusEpochsEpoch(ctx, request.(GetConsensusEpochsEpochRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusEpochsEpoch")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusEpochsEpochResponseObject); ok {
		if err := validResponse.VisitGetConsensusEpochsEpochResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusEvents operation middleware
func (sh *strictHandler) GetConsensusEvents(w http.ResponseWriter, r *http.Request, params GetConsensusEventsParams) {
	var request GetConsensusEventsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusEvents(ctx, request.(GetConsensusEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusEventsResponseObject); ok {
		if err := validResponse.VisitGetConsensusEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusProposals operation middleware
func (sh *strictHandler) GetConsensusProposals(w http.ResponseWriter, r *http.Request, params GetConsensusProposalsParams) {
	var request GetConsensusProposalsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusProposals(ctx, request.(GetConsensusProposalsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusProposals")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusProposalsResponseObject); ok {
		if err := validResponse.VisitGetConsensusProposalsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusProposalsProposalId operation middleware
func (sh *strictHandler) GetConsensusProposalsProposalId(w http.ResponseWriter, r *http.Request, proposalId uint64) {
	var request GetConsensusProposalsProposalIdRequestObject

	request.ProposalId = proposalId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusProposalsProposalId(ctx, request.(GetConsensusProposalsProposalIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusProposalsProposalId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusProposalsProposalIdResponseObject); ok {
		if err := validResponse.VisitGetConsensusProposalsProposalIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusProposalsProposalIdVotes operation middleware
func (sh *strictHandler) GetConsensusProposalsProposalIdVotes(w http.ResponseWriter, r *http.Request, proposalId uint64, params GetConsensusProposalsProposalIdVotesParams) {
	var request GetConsensusProposalsProposalIdVotesRequestObject

	request.ProposalId = proposalId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusProposalsProposalIdVotes(ctx, request.(GetConsensusProposalsProposalIdVotesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusProposalsProposalIdVotes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusProposalsProposalIdVotesResponseObject); ok {
		if err := validResponse.VisitGetConsensusProposalsProposalIdVotesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusRoothashMessages operation middleware
func (sh *strictHandler) GetConsensusRoothashMessages(w http.ResponseWriter, r *http.Request, params GetConsensusRoothashMessagesParams) {
	var request GetConsensusRoothashMessagesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusRoothashMessages(ctx, request.(GetConsensusRoothashMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusRoothashMessages")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusRoothashMessagesResponseObject); ok {
		if err := validResponse.VisitGetConsensusRoothashMessagesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusTransactions operation middleware
func (sh *strictHandler) GetConsensusTransactions(w http.ResponseWriter, r *http.Request, params GetConsensusTransactionsParams) {
	var request GetConsensusTransactionsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusTransactions(ctx, request.(GetConsensusTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusTransactions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusTransactionsResponseObject); ok {
		if err := validResponse.VisitGetConsensusTransactionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusTransactionsTxHash operation middleware
func (sh *strictHandler) GetConsensusTransactionsTxHash(w http.ResponseWriter, r *http.Request, txHash string) {
	var request GetConsensusTransactionsTxHashRequestObject

	request.TxHash = txHash

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusTransactionsTxHash(ctx, request.(GetConsensusTransactionsTxHashRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusTransactionsTxHash")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusTransactionsTxHashResponseObject); ok {
		if err := validResponse.VisitGetConsensusTransactionsTxHashResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusValidators operation middleware
func (sh *strictHandler) GetConsensusValidators(w http.ResponseWriter, r *http.Request, params GetConsensusValidatorsParams) {
	var request GetConsensusValidatorsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusValidators(ctx, request.(GetConsensusValidatorsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusValidators")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusValidatorsResponseObject); ok {
		if err := validResponse.VisitGetConsensusValidatorsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusValidatorsAddress operation middleware
func (sh *strictHandler) GetConsensusValidatorsAddress(w http.ResponseWriter, r *http.Request, address StakingAddress) {
	var request GetConsensusValidatorsAddressRequestObject

	request.Address = address

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusValidatorsAddress(ctx, request.(GetConsensusValidatorsAddressRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusValidatorsAddress")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusValidatorsAddressResponseObject); ok {
		if err := validResponse.VisitGetConsensusValidatorsAddressResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusValidatorsAddressHistory operation middleware
func (sh *strictHandler) GetConsensusValidatorsAddressHistory(w http.ResponseWriter, r *http.Request, address StakingAddress, params GetConsensusValidatorsAddressHistoryParams) {
	var request GetConsensusValidatorsAddressHistoryRequestObject

	request.Address = address
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusValidatorsAddressHistory(ctx, request.(GetConsensusValidatorsAddressHistoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusValidatorsAddressHistory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusValidatorsAddressHistoryResponseObject); ok {
		if err := validResponse.VisitGetConsensusValidatorsAddressHistoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetLayerStatsActiveAccounts operation middleware
func (sh *strictHandler) GetLayerStatsActiveAccounts(w http.ResponseWriter, r *http.Request, layer Layer, params GetLayerStatsActiveAccountsParams) {
	var request GetLayerStatsActiveAccountsRequestObject

	request.Layer = layer
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLayerStatsActiveAccounts(ctx, request.(GetLayerStatsActiveAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLayerStatsActiveAccounts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLayerStatsActiveAccountsResponseObject); ok {
		if err := validResponse.VisitGetLayerStatsActiveAccountsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetLayerStatsTxVolume operation middleware
func (sh *strictHandler) GetLayerStatsTxVolume(w http.ResponseWriter, r *http.Request, layer Layer, params GetLayerStatsTxVolumeParams) {
	var request GetLayerStatsTxVolumeRequestObject

	request.Layer = layer
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLayerStatsTxVolume(ctx, request.(GetLayerStatsTxVolumeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLayerStatsTxVolume")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLayerStatsTxVolumeResponseObject); ok {
		if err := validResponse.VisitGetLayerStatsTxVolumeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetRuntimeAccountsAddress operation middleware
func (sh *strictHandler) GetRuntimeAccountsAddress(w http.ResponseWriter, r *http.Request, runtime Runtime, address EthOrOasisAddress) {
	var request GetRuntimeAccountsAddressRequestObject

	request.Runtime = runtime
	request.Address = address

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRuntimeAccountsAddress(ctx, request.(GetRuntimeAccountsAddressRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRuntimeAccountsAddress")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRuntimeAccountsAddressResponseObject); ok {
		if err := validResponse.VisitGetRuntimeAccountsAddressResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetRuntimeAccountsAddressNfts operation middleware
func (sh *strictHandler) GetRuntimeAccountsAddressNfts(w http.ResponseWriter, r *http.Request, runtime Runtime, address EthOrOasisAddress, params GetRuntimeAccountsAddressNftsParams) {
	var request GetRuntimeAccountsAddressNftsRequestObject

	request.Runtime = runtime
	request.Address = address
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRuntimeAccountsAddressNfts(ctx, request.(GetRuntimeAccountsAddressNftsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRuntimeAccountsAddressNfts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRuntimeAccountsAddressNftsResponseObject); ok {
		if err := validResponse.VisitGetRuntimeAccountsAddressNftsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetRuntimeBlocks operation middleware
func (sh *strictHandler) GetRuntimeBlocks(w http.ResponseWriter, r *http.Request, runtime Runtime, params GetRuntimeBlocksParams) {
	var request GetRuntimeBlocksRequestObject

	request.Runtime = runtime
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRuntimeBlocks(ctx, request.(GetRuntimeBlocksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRuntimeBlocks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRuntimeBlocksResponseObject); ok {
		if err := validResponse.VisitGetRuntimeBlocksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetRuntimeEvents operation middleware
func (sh *strictHandler) GetRuntimeEvents(w http.ResponseWriter, r *http.Request, runtime Runtime, params GetRuntimeEventsParams) {
	var request GetRuntimeEventsRequestObject

	request.Runtime = runtime
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRuntimeEvents(ctx, request.(GetRuntimeEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRuntimeEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRuntimeEventsResponseObject); ok {
		if err := validResponse.VisitGetRuntimeEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetRuntimeEvmTokens operation middleware
func (sh *strictHandler) GetRuntimeEvmTokens(w http.ResponseWriter, r *http.Request, runtime Runtime, params GetRuntimeEvmTokensParams) {
	var request GetRuntimeEvmTokensRequestObject

	request.Runtime = runtime
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRuntimeEvmTokens(ctx, request.(GetRuntimeEvmTokensRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRuntimeEvmTokens")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRuntimeEvmTokensResponseObject); ok {
		if err := validResponse.VisitGetRuntimeEvmTokensResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetRuntimeEvmTokensAddress operation middleware
func (sh *strictHandler) GetRuntimeEvmTokensAddress(w http.ResponseWriter, r *http.Request, runtime Runtime, address EthOrOasisAddress) {
	var request GetRuntimeEvmTokensAddressRequestObject

	request.Runtime = runtime
	request.Address = address

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRuntimeEvmTokensAddress(ctx, request.(GetRuntimeEvmTokensAddressRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRuntimeEvmTokensAddress")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRuntimeEvmTokensAddressResponseObject); ok {
		if err := validResponse.VisitGetRuntimeEvmTokensAddressResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetRuntimeEvmTokensAddressHolders operation middleware
func (sh *strictHandler) GetRuntimeEvmTokensAddressHolders(w http.ResponseWriter, r *http.Request, runtime Runtime, address EthOrOasisAddress, params GetRuntimeEvmTokensAddressHoldersParams) {
	var request GetRuntimeEvmTokensAddressHoldersRequestObject

	request.Runtime = runtime
	request.Address = address
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRuntimeEvmTokensAddressHolders(ctx, request.(GetRuntimeEvmTokensAddressHoldersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRuntimeEvmTokensAddressHolders")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRuntimeEvmTokensAddressHoldersResponseObject); ok {
		if err := validResponse.VisitGetRuntimeEvmTokensAddressHoldersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetRuntimeEvmTokensAddressNfts operation middleware
func (sh *strictHandler) GetRuntimeEvmTokensAddressNfts(w http.ResponseWriter, r *http.Request, runtime Runtime, address EthOrOasisAddress, params GetRuntimeEvmTokensAddressNftsParams) {
	var request GetRuntimeEvmTokensAddressNftsRequestObject

	request.Runtime = runtime
	request.Address = address
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRuntimeEvmTokensAddressNfts(ctx, request.(GetRuntimeEvmTokensAddressNftsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRuntimeEvmTokensAddressNfts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRuntimeEvmTokensAddressNftsResponseObject); ok {
		if err := validResponse.VisitGetRuntimeEvmTokensAddressNftsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetRuntimeEvmTokensAddressNftsId operation middleware
func (sh *strictHandler) GetRuntimeEvmTokensAddressNftsId(w http.ResponseWriter, r *http.Request, runtime Runtime, address EthOrOasisAddress, id TextBigInt) {
	var request GetRuntimeEvmTokensAddressNftsIdRequestObject

	request.Runtime = runtime
	request.Address = address
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRuntimeEvmTokensAddressNftsId(ctx, request.(GetRuntimeEvmTokensAddressNftsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRuntimeEvmTokensAddressNftsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRuntimeEvmTokensAddressNftsIdResponseObject); ok {
		if err := validResponse.VisitGetRuntimeEvmTokensAddressNftsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetRuntimeStatus operation middleware
func (sh *strictHandler) GetRuntimeStatus(w http.ResponseWriter, r *http.Request, runtime Runtime) {
	var request GetRuntimeStatusRequestObject

	request.Runtime = runtime

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRuntimeStatus(ctx, request.(GetRuntimeStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRuntimeStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRuntimeStatusResponseObject); ok {
		if err := validResponse.VisitGetRuntimeStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetRuntimeTransactions operation middleware
func (sh *strictHandler) GetRuntimeTransactions(w http.ResponseWriter, r *http.Request, runtime Runtime, params GetRuntimeTransactionsParams) {
	var request GetRuntimeTransactionsRequestObject

	request.Runtime = runtime
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRuntimeTransactions(ctx, request.(GetRuntimeTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRuntimeTransactions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRuntimeTransactionsResponseObject); ok {
		if err := validResponse.VisitGetRuntimeTransactionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetRuntimeTransactionsTxHash operation middleware
func (sh *strictHandler) GetRuntimeTransactionsTxHash(w http.ResponseWriter, r *http.Request, runtime Runtime, txHash string) {
	var request GetRuntimeTransactionsTxHashRequestObject

	request.Runtime = runtime
	request.TxHash = txHash

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRuntimeTransactionsTxHash(ctx, request.(GetRuntimeTransactionsTxHashRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRuntimeTransactionsTxHash")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRuntimeTransactionsTxHashResponseObject); ok {
		if err := validResponse.VisitGetRuntimeTransactionsTxHashResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}
