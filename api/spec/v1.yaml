openapi: 3.0.3
info:
  title: Oasis Indexer API V1
  description: An API for accessing indexed data from the Oasis Network.
  version: 0.1.0

servers:
  - url: http://index.oasis.dev/v1
    description: Mainnet index endpoint.
  - url: http://index.testnet.oasis.dev/v1
    description: Testnet index endpoint.

x-query-params:
  - &offset
    in: query
    name: offset
    schema:
      type: integer
    description: |
      The number of items to skip before starting to collect the result set.
  - &limit
    in: query
    name: limit
    schema:
      type: integer
    description: |
      The maximum numbers of items to return.
  - &height
    in: query
    name: height
    schema:
      type: integer
      format: int64
    description: |
      The block height from which to query state. The Oasis Indexer does not
      make any guarantees about availability of historical state data.

x-examples:
  chain-id:
    - &chain_id_1 'oasis-3'
  block-height:
    - &block_height_1 8048956
    - &block_height_2 8049555
  block-hash:
    - &block_hash_1 '0a29ac21fa69bb9e43e5cb25d10826ff3946f1ce977e82f99a2614206a50765c'
  tx-hash:
    - &tx_hash_1 '0d0531d6b8a468c07440182b1cdda517f5a076d69fb2199126a83082ecfc0f41'
  tx-method:
    - &tx_method_1 'staking.Transfer'
  tx-body:
    - &tx_body_1 '{"amount":"1000000000","account":"oasis1qpg2xuz46g53737343r20yxeddhlvc2ldqsjh70p"}'
  epoch:
    - &epoch_1 8048956
    - &epoch_2 8048966
  entity-id:
    - &entity_id_1 'gb8SHLeDc69Elk7OTfqhtVgE2sqxrBCDQI84xKR+Bjg='
  node-id:
    - &node_id_1 'lbxs4hlud9XNloIOdhJPaCahd7HtiY8QATCgGnFfCM0='
  staking-address:
    - &staking_address_1 'oasis1qpg2xuz46g53737343r20yxeddhlvc2ldqsjh70p'
    - &staking_address_2 'oasis1qprtzrg97jk0wxnqkhxwyzy5qys47r7alvfl3fcg'
  proposal-id:
    - &proposal_id_1 1
  proposal-state:
    - &proposal_state_1 'active'
  runtime-block-round:
    - &runtime_block_round_1 3283246
  runtime-block-hash:
    - &runtime_block_hash_1 '21c243cd34bedfc234f1b45615d10a868f0655f59578f063a7d2fc8c6e5b4009'
  iso-timestamp:
    - &iso_timestamp_1 '2022-03-01T00:00:00Z'
    - &iso_timestamp_2 '2019-04-01T00:00:00Z'
    - &iso_timestamp_3 '2022-10-15T00:05:34Z'

x-common-types:
  tx-methods: &tx_methods
    - staking.Transfer
    - staking.AddEscrow
    - staking.ReclaimEscrow
    - staking.AmendCommissionSchedule
    - staking.Allow
    - staking.Withdraw
    - roothash.ExecutorCommit
    - roothash.ExecutorProposerTimeout
    - registry.RegisterEntity
    - registry.RegisterNode
    - registry.RegisterRuntime
    - governance.CastVote
    - governance.SubmitProposal
    - beacon.PVSSCommit
    - beacon.PVSSReveal
    - beacon.VRFProve

paths:
  /:
    get:
      summary: Returns the indexer status.
      responses:
        '200':
          description: A JSON object containing status metadata.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /consensus/blocks:
    get:
      summary: Returns a list of consensus blocks.
      parameters:
        - *limit
        - *offset
        - in: query
          name: from
          schema:
            type: integer
            format: int64
          description: A filter on minimum block height, inclusive.
          example: *block_height_1
        - in: query
          name: to
          schema:
            type: integer
            format: int64
          description: A filter on maximum block height, inclusive.
          example: *block_height_2
        - in: query
          name: after
          schema:
            type: string
            format: date-time
          description: A filter on minimum block time, inclusive.
          example: *iso_timestamp_1
        - in: query
          name: before
          schema:
            type: string
            format: date-time
          description: A filter on maximum block time, inclusive.
          example: *iso_timestamp_2
      responses:
        '200':
          description: A JSON object containing a list of consensus blocks.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BlockList'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /consensus/blocks/{height}:
    get:
      summary: Returns a consensus block.
      parameters:
        - in: path
          name: height
          required: true
          schema:
            type: integer
            format: int64
          description: The block height of the block to return.
          example: *block_height_1
      responses:
        '200':
          description: A JSON object containing a consensus block.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Block'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /consensus/transactions:
    get:
      summary: Returns a list of consensus transactions.
      parameters:
        - *limit
        - *offset
        - in: query
          name: block
          schema:
            type: integer
            format: int64
          description: A filter on block height.
          example: *block_height_1
        - in: query
          name: method
          schema:
            type: string
            enum: *tx_methods
          description: A filter on transaction method.
          example: *tx_method_1
        - in: query
          name: sender
          schema:
            type: string
          description: A filter on transaction sender.
          example: *staking_address_1
        - in: query
          name: minFee
          schema:
            type: integer
            format: int64
          description: A filter on minimum transaction fee, inclusive.
          example: 1000
        - in: query
          name: maxFee
          schema:
            type: integer
            format: int64
          description: A filter on maximum transaction fee, inclusive.
          example: 10000
        - in: query
          name: code
          schema:
            type: integer
          description: A filter on transaction status code.
      responses:
        '200':
          description: |
            A JSON object containing a list of consensus transactions.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/TransactionList'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /consensus/transactions/{tx_hash}:
    get:
      summary: Returns a consensus transaction.
      parameters:
        - in: path
          name: tx_hash
          required: true
          schema:
            type: string
          description: The transaction hash of the transaction to return.
          example: *tx_hash_1
      responses:
        '200':
          description: A JSON object containing a consensus transaction.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Transaction'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /consensus/transactions/{tx_hash}/events:
    get:
      summary: Returns events from a consensus transaction.
      parameters:
        - in: path
          name: tx_hash
          required: true
          schema:
            type: string
          description: The transaction hash associated with the events to return.
          example: *tx_hash_1
      responses:
        '200':
          description: |
            A JSON object containing a list of events from a consensus transaction.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/EventList'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /consensus/entities:
    get:
      summary: Returns a list of entities registered at the consensus layer.
      parameters:
        - *limit
        - *offset
      responses:
        '200':
          description: |
            A JSON object containing a list of entities registered
            at the consensus layer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityList'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /consensus/entities/{entity_id}:
    get:
      summary: Returns an entity registered at the consensus layer.
      parameters:
        - in: path
          name: entity_id
          required: true
          schema:
            type: string
          description: The entity ID of the entity to return.
          example: *entity_id_1
      responses:
        '200':
          description: |
            A JSON object containing an entity registered
            at the consensus layer.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Entity'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /consensus/entities/{entity_id}/nodes:
    get:
      summary: Returns a list of nodes registered at the consensus layer.
      parameters:
        - *limit
        - *offset
        - in: path
          name: entity_id
          required: true
          schema:
            type: string
          description: |
            The entity ID of the controlling entity of the nodes to return.
          example: *entity_id_1
      responses:
        '200':
          description: |
            A JSON object containing a list of nodes registered at the consensus layer.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/NodeList'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /consensus/entities/{entity_id}/nodes/{node_id}:
    get:
      summary: Returns a node registered at the consensus layer.
      parameters:
        - in: path
          name: entity_id
          required: true
          schema:
            type: string
          description: |
            The entity ID of the entity controlling the node to return.
          example: *entity_id_1
        - in: path
          name: node_id
          required: true
          schema:
            type: string
          description: The node ID of the node to return.
          example: *node_id_1
      responses:
        '200':
          description: |
            A JSON object containing a node registered at the consensus layer.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Node'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /consensus/validators:
    get:
      summary: Returns a list of validators registered at the consensus layer.
      parameters:
        - *limit
        - *offset
      responses:
        '200':
          description: |
            A JSON object containing a list of validators registered
            at the consensus layer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidatorList'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /consensus/validators/{entity_id}:
    get:
      summary: Returns a validator registered at the consensus layer.
      parameters:
        - in: path
          name: entity_id
          required: true
          schema:
            type: string
          description: The entity ID of the entity to return.
          example: *entity_id_1
      responses:
        '200':
          description: |
            A JSON object containing a validator registered at the 
            consensus layer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Validator'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
          
  /consensus/accounts:
    get:
      summary: Returns a list of consensus layer accounts.
      parameters:
        - *limit
        - *offset
        - in: query
          name: minAvailable
          schema:
            type: integer
            format: int64
          description: A filter on the minimum available account balance.
          example: 10000000000
        - in: query
          name: maxAvailable
          schema:
            type: integer
            format: int64
          description: A filter on the maximum available account balance.
          example: 100000000000
        - in: query
          name: minEscrow
          schema:
            type: integer
            format: int64
          description: A filter on the minimum active escrow account balance.
          example: 10000000000
        - in: query
          name: maxEscrow
          schema:
            type: integer
            format: int64
          description: A filter on the maximum active escrow account balance.
          example: 100000000000
        - in: query
          name: minDebonding
          schema:
            type: integer
            format: int64
          description: A filter on the minimum debonding account balance.
          example: 10000000000
        - in: query
          name: maxDebonding
          schema:
            type: integer
            format: int64
          description: A filter on the maximum debonding account balance.
          example: 100000000000
        - in: query
          name: minTotalBalance
          schema:
            type: integer
            format: int64
          description: A filter on the minimum total account balance.
          example: 10000000000
        - in: query
          name: maxTotalBalance
          schema:
            type: integer
            format: int64
          description: A filter on the maximum total account balance.
          example: 100000000000
      responses:
        '200':
          description: |
            A JSON object containing a list of consensus layer accounts.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AccountList'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /consensus/accounts/{address}:
    get:
      summary: Returns a consensus layer account.
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: The staking address of the account to return.
          example: *staking_address_1
      responses:
        '200':
          description: A JSON object containing a consensus layer account.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /consensus/accounts/{address}/delegations:
    get:
      summary: Returns an account's delegations.
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: The staking address of the account that delegated.
          example: *staking_address_1
      responses:
        '200':
          description: A JSON object containing a list of delegations.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/DelegationList'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /consensus/accounts/{address}/debonding_delegations:
    get:
      summary: Returns an account's debonding delegations.
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: The staking address of the account that delegated.
          example: *staking_address_1
      responses:
        '200':
          description: A JSON object containing a list of debonding delegations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebondingDelegationList'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /consensus/epochs:
    get:
      summary: Returns a list of consensus epochs.
      parameters:
        - *limit
        - *offset
      responses:
        '200':
          description: A JSON object containing a list of consensus epochs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EpochList'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /consensus/epochs/{epoch}:
    get:
      summary: Returns a consensus epoch.
      parameters:
        - in: path
          name: epoch
          required: true
          schema:
            type: integer
            format: int64
          description: The epoch number of the epoch to return.
          example: *epoch_1
      responses:
        '200':
          description: A JSON object containing a consensus epoch.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Epoch'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /consensus/proposals:
    get:
      summary: Returns a list of governance proposals.
      parameters:
        - *limit
        - *offset
        - in: query
          name: submitter
          schema:
            type: string
          description: The submitter of the proposal.
          example: *staking_address_1
        - in: query
          name: state
          schema:
            type: string
          description: The state of the proposal.
          example: *proposal_state_1
      responses:
        '200':
          description: A JSON object containing a list of governance proposals.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ProposalList'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /consensus/proposals/{proposal_id}:
    get:
      summary: Returns a governance proposal.
      parameters:
        - in: path
          name: proposal_id
          required: true
          schema:
            type: integer
            format: int64
          description: The unique identifier of the proposal to return.
          example: *proposal_id_1
      responses:
        '200':
          description: A JSON object containing a governance proposal.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Proposal'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /consensus/proposals/{proposal_id}/votes:
    get:
      summary: Returns a list of votes for a governance proposal.
      parameters:
        - *limit
        - *offset
        - in: path
          name: proposal_id
          required: true
          schema:
            type: integer
            format: int64
          description: |
            The unique identifier of the proposal for which votes are returned.
          example: *proposal_id_1
      responses:
        '200':
          description: |
            A JSON object containing a list of votes for a governance proposal.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ProposalVotes'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /emerald/blocks:
    get:
      summary: Returns a list of Emerald blocks.
      parameters:
        - *limit
        - *offset
        - in: query
          name: from
          schema:
            type: integer
            format: int64
          description: A filter on minimum block height, inclusive.
          example: *block_height_1
        - in: query
          name: to
          schema:
            type: integer
            format: int64
          description: A filter on maximum block height, inclusive.
          example: *block_height_2
        - in: query
          name: after
          schema:
            type: string
            format: date-time
          description: A filter on minimum block time, inclusive.
          example: *iso_timestamp_1
        - in: query
          name: before
          schema:
            type: string
            format: date-time
          description: A filter on maximum block time, inclusive.
          example: *iso_timestamp_2
      responses:
        '200':
          description: A JSON object containing a list of Emerald blocks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuntimeBlockList'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /consensus/stats/tps:
    get:
      summary: Returns the consensus layer TPS for each 5 minute interval.
      parameters:
        - *limit
        - *offset
      responses:
        '200':
          description: |
            A JSON object containing a list of TPS values for each interval.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/TpsCheckpoints'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /consensus/stats/daily_volume:
    get:
      summary: Returns the consensus layer daily transaction volume for each day.
      parameters:
        - *limit
        - *offset
      responses:
        '200':
          description: |
            A JSON object containing a list of daily transaction volumes for each day.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/VolumeList'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    ApiError:
      type: object
      properties:
        msg:
          type: string
          description: An error message.
          example: 'internal storage error'

    Status:
      type: object
      properties:
        latest_chain_id:
          type: string
          description: The most recently indexed chain ID.
          example: *chain_id_1
        latest_block:
          type: integer
          format: int64
          description: The height of the most recent indexed block. Query a synced Oasis node for the latest block produced.
          example: *block_height_1
        latest_update:
          type: string
          format: date-time
          description: The RFC 3339 formatted time when the Indexer processed the latest block. Compare with current time for approximate indexing progress with the Oasis Network.
          example: *iso_timestamp_1

    BlockList:
      type: object
      properties:
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/Block'
      description: |
        A list of consensus blocks.

    Block:
      type: object
      properties: 
        height:
          type: integer
          format: int64
          description: The block height.
          example: *block_height_1
        hash:
          type: string
          description: The block header hash.
          example: *block_hash_1
        timestamp:
          type: string
          format: date-time
          description: The second-granular consensus time.
          example: *iso_timestamp_1
      description: |
        A consensus block.

    Delegation:
      type: object
      properties: 
        amount:
          type: integer
          format: int64
          description: The amount of tokens delegated in base units.
          example: 10000000000
        shares:
          type: integer
          format: int64
          description: The shares of tokens delegated.
        validator_address:
          type: string
          description: The delegatee address.
          example: *staking_address_1
      description: |
        A delegation.

    DelegationList:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Delegation'
      description: |
        A list of delegations.

    DebondingDelegation:
      type: object
      properties:
        amount:
          type: integer
          format: int64
          description: The amount of tokens delegated in base units.
          example: 10000000000
        shares:
          type: integer
          format: int64
          description: The shares of tokens delegated.
        validator_address:
          type: string
          description: The delegatee address.
          example: *staking_address_1
        debond_end:
          type: integer
          format: int64
          description: The epoch at which the debonding ends.
      description: |
        A debonding delegation.

    DebondingDelegationList:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/DebondingDelegation'
      description: |
        A list of debonding delegations.

    TransactionList:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
      description: |
        A list of consensus transactions.
    
    Transaction:
      type: object
      properties: 
        height:
          type: integer
          format: int64
          description: The block height at which this transaction was executed.
          example: *block_height_1
        hash:
          type: string
          description: The cryptographic hash of this transaction's encoding.
          example: *tx_hash_1
        nonce:
          type: integer
          format: int64
          description: The nonce used with this transaction, to prevent replay.
          example: 0
        fee:
          type: integer
          format: int64
          description: |
            The fee that this transaction's sendeer committed
            to pay to execute it.
          example: 1000
        method:
          type: string
          enum: *tx_methods
          description: The method that was called.
          example: *tx_method_1
        body:
          type: string
          description: The method call body.
          example: *tx_body_1
        success:
          type: boolean
          description: Whether this transaction successfully executed.
      description: |
        A consensus transaction.

    EventList:
      type: object
      properties:
        entities:
          type: array
          items:
            $ref: '#/components/schemas/Event'
      description: |
        A list of events at the consensus layer.

    Event:
      type: object
      properties: 
        id:
          type: string
          description: The public key identifying this entity.
          example: *entity_id_1
        nodes:
          type: array
          items:
            type: string
          description: The vector of nodes owned by this entity.
      description: |
        An event from the consensus layer.

    EntityList:
      type: object
      properties:
        entities:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
      description: |
        A list of entities registered at the consensus layer.
    
    Entity:
      type: object
      properties: 
        id:
          type: string
          description: The public key identifying this entity.
          example: *entity_id_1
        nodes:
          type: array
          items:
            type: string
          description: The vector of nodes owned by this entity.
      description: |
        An entity registered at the consensus layer.

    ValidatorList:
      type: object
      properties:
        validators:
          type: array
          items:
            $ref: '#/components/schemas/Validator'
      description: |
        A list of validators registered at the consensus layer.

    Validator:
      type: object
      properties:
        entity_address:
            type: string
            description: The staking address identifying this Validator.
            example: *staking_address_1
        entity_id:
          type: string
          description: The public key identifying this Validator.
          example: *entity_id_1
        name:
          type: string
          description: The name of this Validator.
          example: Valid validly validator
        node_id:
          type: string
          description: The public key identifying this Validator's node.
          example: *node_id_1
        escrow:
          type: integer
          format: int64
          description: The amount staked.
        active:
          type: boolean
          description: Entity is part of validator set.
        status:
          type: boolean
          description: An entity has a node that is registered for being a validator, node is up to date, and has successfully registered itself.
        media:
          type: object
          properties:
            website_link:
              type: string
              description: An URL associated with the entity.
            email_address:
              type: string
              description: An email address for the validator.
            twitter_acc:
              type: string
              description: A Twitter handle.
            tg_chat:
              type: string
              description: An Telegram handle.
            logotype:
              type: string
              description: A logo type.
        current_rate:
          type: integer
          format: int64
          description: Commission rate.
        current_commission_bound:
          type: object
          properties:
            lower:
              type: integer
              format: int64
            upper:
              type: integer
              format: int64
            epoch_start:
              type: integer
              format: int64
            epoch_end:
              type: integer
              format: int64
      description: |
        An validator registered at the consensus layer.

    NodeList:
      type: object
      properties:
        entity_id:
          type: string
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/Node'
      description: |
        A list of nodes registered at the consensus layer.
    
    Node:
      type: object
      properties: 
        id:
          type: string
          description: The public key identifying this node.
          example: *node_id_1
        entity_id:
          type: string
          description: |
            The public key identifying the entity controlling this node.
          example: *entity_id_1
        expiration:
          type: integer
          format: int64
          description: The epoch in which this node's commitment expires.
        tls_pubkey:
          type: string
          description: The public key used for establishing TLS connections.
        tls_next_pubkey:
          type: string
          description: |
            The public key that will be used for establishing TLS connections
            upon rotation.
        p2p_pubkey:
          type: string
          description: The unique identifier of this node on the P2P transport.
        consensus_pubkey:
          type: string
          description: The unique identifier of this node as a consensus member
        roles:
          type: string
          description: A bitmask representing this node's roles.
      description: |
        A node registered at the consensus layer.

    AccountList:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
      description: |
        A list of consensus layer accounts.
    
    Account:
      type: object
      properties: 
        address:
          type: string
          description: The staking address for this account.
          example: *staking_address_1
        nonce:
          type: integer
          format: int64
          description: A nonce used to prevent replay.
          example: 0
        available:
          type: integer
          format: int64
          description: The available balance, in base units.
          example: 10000000000
        escrow:
          type: integer
          format: int64
          description: The active escrow balance, in base units.
          example: 10000000000
        debonding:
          type: integer
          format: int64
          description: The debonding escrow balance, in base units.
          example: 10000000000
        delegations_balance:
          type: integer
          format: int64
          description: The delegations balance, in base units.
          example: 10000000000
        debonding_delegations_balance:
          type: integer
          format: int64
          description: The debonding delegations balance, in base units.
          example: 10000000000
        allowances:
          type: array
          items:
            $ref: '#/components/schemas/Allowance'
          description: The allowances made by this account.
      description: |
        A consensus layer account.
    
    Allowance:
      type: object
      properties:
        address:
          type: string
          description: The allowed account.
          example: *staking_address_2
        amount:
          type: integer
          format: int64
          description: The amount allowed for the allowed account.
          example: 10000000000
    
    EpochList:
      type: object
      properties:
        epochs:
          type: array
          items:
            $ref: '#/components/schemas/Epoch'
      description: |
        A list of consensus epochs.
    
    Epoch:
      type: object
      properties: 
        id:
          type: integer
          format: int64
          description: The epoch number.
          example: *epoch_1
        start_height:
          type: integer
          format: int64
          description: The (inclusive) height at which this epoch started.
          example: *block_height_1
        end_height:
          type: integer
          format: int64
          description: The (inclusive) height at which this epoch ended.
          example: *block_height_2
      description: |
        A consensus epoch.
    
    ProposalList:
      type: object
      properties:
        proposals:
          type: array
          items:
            $ref: '#/components/schemas/Proposal'
      description: |
        A list of governance proposals.
    
    Proposal:
      type: object
      properties: 
        id:
          type: integer
          format: int64
          description: The unique identifier of the proposal.
          example: *proposal_id_1
        submitter:
          type: string
          description: The staking address of the proposal submitter.
          example: *staking_address_1
        state:
          type: string
          description: The state of the proposal.
          example: 'active'
        deposit:
          type: integer
          format: int64
          description: The deposit attached to this proposal.
          example: 10000000000
        handler:
          type: string
          description: The name of the upgrade handler.
        target:
          type: object
          properties:
            consensus_protocol:
              type: string
            runtime_host_protocol:
              type: string
            runtime_committee_protocol:
              type: string
          description: The target propotocol versions for this upgrade proposal.
        epoch:
          type: integer
          format: int64
          description: The epoch at which the proposed upgrade will happen.
          example: *epoch_1
        cancels:
          type: integer
          format: int64
          description: |
            The proposal to cancel, if this proposal proposes
            cancelling an existing proposal. 
        created_at:
          type: integer
          format: int64
          description: The epoch at which this proposal was created.
          example: *epoch_1
        closes_at:
          type: integer
          format: int64
          description: The epoch at which voting for this proposal will close.
          example: *epoch_2
        invalid_votes:
          type: integer
          format: int64
          description: |
            The number of invalid votes for this proposal, after tallying.
      description: |
        A governance proposal.

    ProposalVotes:
      type: object
      properties:
        proposal_id:
          type: integer
          format: int64
          description: The unique identifier of the proposal.
        votes:
          type: array
          items:
            $ref: '#/components/schemas/ProposalVote'
          description: The list of votes for the proposal.
      description: |
        A list of votes for a governance proposal.

    ProposalVote:
      type: object
      properties: 
        address:
          type: string
          description: The staking address casting this vote.
          example: *staking_address_1
        vote:
          type: string
          description: The vote cast.
          example: 'yes'

    RuntimeBlockList:
      type: object
      properties:
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/RuntimeBlock'
      description: |
        A list of consensus blocks.

    RuntimeBlock:
      type: object
      properties:
        round:
          type: integer
          format: int64
          description: The block round.
          example: *runtime_block_round_1
        hash:
          type: string
          description: The block header hash.
          example: *runtime_block_hash_1
        timestamp:
          type: string
          format: date-time
          description: The second-granular consensus time.
          example: *iso_timestamp_3
        num_transactions:
          type: integer
          format: int32
          description: The number of transactions in the block.
          example: 1
        size:
          type: integer
          format: int32
          description: The total byte size of all transactions in the block.
          example: 203
        gas_used:
          type: integer
          format: int64
          description: The total gas used by all transactions in the block.
          example: 118597
      description: |
        A ParaTime block.

    TpsCheckpoints:
      type: object
      properties:
        interval_minutes:
          type: integer
          format: int
          description: The length, in minutes, of each TPS measurement window.
        tps_checkpoints:
          type: array
          items:
            $ref: '#/components/schemas/TpsCheckpoint'
          description: The list of TPS checkpoint windows.
      description: |
        A list of TPS checkpoint windows.

    TpsCheckpoint:
      type: object
      properties: 
        timestamp:
          type: string
          format: date-time
          description: The timestamp anchoring this TPS measurement window.
          example: *iso_timestamp_1
        tx_volume:
          type: integer
          format: int64
          description: The transaction volume in this measurement window.
          example: 420

    VolumeList:
      type: object
      properties:
        volumes:
          type: array
          items:
            $ref: '#/components/schemas/Volume'
          description: The list of daily transaction volumes.
      description: |
        A list of daily transaction volumes.

    Volume:
      type: object
      properties: 
        date:
          type: string
          format: date-time
          description: The date for this daily transaction volume measurement.
          example: *iso_timestamp_1
        tx_volume:
          type: integer
          format: int64
          description: The transaction volume on this day.
          example: 420

  responses:
    InvalidRequest:
      description: Invalid request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    NotFound:
      description: No results found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    ServerError:
      description: A server error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
