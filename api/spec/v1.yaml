# yaml-language-server: $schema=https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas/v3.1/schema.json

openapi: 3.0.3
info:
  title: Oasis Indexer API V1
  description: An API for accessing indexed data from the Oasis Network.
  version: 0.1.0

servers:
  - url: http://index.oasislabs.com/v1
    description: Mainnet index endpoint.
  - url: http://index.testnet.oasislabs.com/v1
    description: Testnet index endpoint.

x-query-params:
  - &offset
    in: query
    name: offset
    schema:
      type: integer
      format: uint64
      default: 0
    description: |
      The number of items to skip before starting to collect the result set.
  - &limit
    in: query
    name: limit
    schema:
      type: integer
      format: uint64
      default: 100
      minimum: 1
      maximum: 1000
    description: |
      The maximum numbers of items to return.
  - &height
    in: query
    name: height
    schema:
      type: integer
      format: int64
    description: |
      The block height from which to query state. The Oasis Indexer does not
      make any guarantees about availability of historical state data.
  - &bucket_size_seconds
    in: query
    name: bucket_size_seconds
    schema:
      type: integer
      format: int32
      default: 3600
    description: |
      The size of buckets into which the statistic is grouped, in seconds.
      The backend supports a limited number of bucket sizes: 300 (5 minutes) and
      3600 (1 hour). Requests with other values may be rejected.

x-examples:
  chain-id:
    - &chain_id_1 'oasis-3'
  block-height:
    - &block_height_1 8048956
    - &block_height_2 8049555
  block-hash:
    - &block_hash_1 '0a29ac21fa69bb9e43e5cb25d10826ff3946f1ce977e82f99a2614206a50765c'
  tx-hash:
    - &tx_hash_1 '0d0531d6b8a468c07440182b1cdda517f5a076d69fb2199126a83082ecfc0f41'
  tx-body:
    - &tx_body_1 '{"amount":"1000000000","account":"oasis1qpg2xuz46g53737343r20yxeddhlvc2ldqsjh70p"}'
  epoch:
    - &epoch_1 8048956
    - &epoch_2 8048966
  event-type:
    - &event_type_1 'staking.escrow.take'
  entity-id:
    - &entity_id_1 'gb8SHLeDc69Elk7OTfqhtVgE2sqxrBCDQI84xKR+Bjg='
  node-id:
    - &node_id_1 'lbxs4hlud9XNloIOdhJPaCahd7HtiY8QATCgGnFfCM0='
  staking-address:
    - &staking_address_1 'oasis1qpg2xuz46g53737343r20yxeddhlvc2ldqsjh70p'
    - &staking_address_2 'oasis1qprtzrg97jk0wxnqkhxwyzy5qys47r7alvfl3fcg'
  proposal-id:
    - &proposal_id_1 1
  proposal-state:
    - &proposal_state_1 'active'
  runtime-block-round:
    - &runtime_block_round_1 3283246
  runtime-block-hash:
    - &runtime_block_hash_1 '21c243cd34bedfc234f1b45615d10a868f0655f59578f063a7d2fc8c6e5b4009'
  iso-timestamp:
    - &iso_timestamp_1 '2022-03-01T00:00:00Z'
    - &iso_timestamp_2 '2019-04-01T00:00:00Z'
    - &iso_timestamp_3 '2022-10-15T00:05:34Z'

x-err-responses:
  base-error: &base_error_response
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/ApiError'
  common-errors: &common_error_responses
    '400':
      <<: *base_error_response
      description: Invalid request.
    '404':
      <<: *base_error_response
      description: The requested resource was not found.
    '500':
      <<: *base_error_response
      description: A server error occurred.

x-type-annotations:
  big-int: &BigIntType
    type: string
    pattern: '^-?[0-9]+$'
    format: bigint  # Not used by the indexer; might be helpful to client generators to recognize this type.
    example: "1234567890123456789012"
    x-go-type: common.BigInt
    x-go-type-import: { name: common, path: "github.com/oasisprotocol/oasis-indexer/common" }

paths:
  /:
    get:
      summary: Returns the indexer status.
      responses:
        '200':
          description: A JSON object containing status metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        <<: *common_error_responses

  /consensus/blocks:
    get:
      summary: Returns a list of consensus blocks, sorted from most to least recent.
      parameters:
        - *limit
        - *offset
        - in: query
          name: from
          schema:
            type: integer
            format: int64
          description: A filter on minimum block height, inclusive.
          example: *block_height_1
        - in: query
          name: to
          schema:
            type: integer
            format: int64
          description: A filter on maximum block height, inclusive.
          example: *block_height_2
        - in: query
          name: after
          schema:
            type: string
            format: date-time
          description: A filter on minimum block time, inclusive.
          example: *iso_timestamp_1
        - in: query
          name: before
          schema:
            type: string
            format: date-time
          description: A filter on maximum block time, inclusive.
          example: *iso_timestamp_2
      responses:
        '200':
          description: A JSON object containing a list of consensus blocks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockList'
        <<: *common_error_responses

  /consensus/blocks/{height}:
    get:
      summary: Returns a consensus block.
      parameters:
        - in: path
          name: height
          required: true
          schema:
            type: integer
            format: int64
          description: The block height of the block to return.
          example: *block_height_1
      responses:
        '200':
          description: A JSON object containing a consensus block.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Block'
        <<: *common_error_responses

  /consensus/transactions:
    get:
      summary: Returns a list of consensus transactions.
      parameters:
        - *limit
        - *offset
        - in: query
          name: block
          schema:
            type: integer
            format: int64
          description: A filter on block height.
          example: *block_height_1
        - in: query
          name: method
          schema:
            $ref: '#/components/schemas/ConsensusTxMethod'
          description: A filter on transaction method.
        - in: query
          name: sender
          schema:
            type: string
          description: A filter on transaction sender.
          example: *staking_address_1
        - in: query
          name: rel
          schema:
            type: string
          description: A filter on related accounts.
          example: *staking_address_1
        - in: query
          name: minFee
          schema:
            type: integer
            format: int64
          description: A filter on minimum transaction fee, inclusive.
          example: 1000
        - in: query
          name: maxFee
          schema:
            type: integer
            format: int64
          description: A filter on maximum transaction fee, inclusive.
          example: 10000
        - in: query
          name: code
          schema:
            type: integer
          description: A filter on transaction status code.
      responses:
        '200':
          description: |
            A JSON object containing a list of consensus transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionList'
        <<: *common_error_responses

  /consensus/transactions/{tx_hash}:
    get:
      summary: Returns a consensus transaction.
      parameters:
        - in: path
          name: tx_hash
          required: true
          schema:
            type: string
          description: The transaction hash of the transaction to return.
          example: *tx_hash_1
      responses:
        '200':
          description: A JSON object containing a consensus transaction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        <<: *common_error_responses

  /consensus/events:
    get:
      summary: Returns a list of consensus events.
      parameters:
        - *limit
        - *offset
        - in: query
          name: height
          schema:
            type: integer
            format: int64
          description: A filter on block height.
          example: *block_height_1
        - in: query
          name: tx_index
          schema:
            type: integer
            format: int32
          description: |
            A filter on transaction index. The returned events all need to originate
            from a transaction that appeared in `tx_index`-th position in the block.
            It is invalid to specify this filter without also specifying a `block`.
            Specifying `tx_index` and `block` is an alternative to specifying `tx_hash`;
            either works to fetch events from a specific transaction.
          example: 3
        - in: query
          name: tx_hash
          schema:
            type: string
          description: |
            A filter on the hash of the transaction that originated the events.
            Specifying `tx_index` and `block` is an alternative to specifying `tx_hash`;
            either works to fetch events from a specific transaction.
          example: *tx_hash_1
        - in: query
          name: rel
          schema:
            type: string
          description: |
            A filter on related accounts. Every returned event will refer to
            this account. For example, for a `Transfer` event, this will be the
            the sender or the recipient of tokens.
          example: *staking_address_1
        - in: query
          name: type
          schema:
            $ref: '#/components/schemas/ConsensusEventType'
          description: A filter on the event type.
          example: *event_type_1
      responses:
        '200':
          description: |
            Consensus events matching the filters, sorted by most recent first.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsensusEventList'
        <<: *common_error_responses

  /consensus/entities:
    get:
      summary: Returns a list of entities registered at the consensus layer.
      parameters:
        - *limit
        - *offset
      responses:
        '200':
          description: |
            A JSON object containing a list of entities registered
            at the consensus layer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityList'
        <<: *common_error_responses

  /consensus/entities/{entity_id}:
    get:
      summary: Returns an entity registered at the consensus layer.
      parameters:
        - in: path
          name: entity_id
          required: true
          schema:
            type: string
          description: The entity ID of the entity to return.
          example: *entity_id_1
      responses:
        '200':
          description: |
            A JSON object containing an entity registered
            at the consensus layer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        <<: *common_error_responses

  /consensus/entities/{entity_id}/nodes:
    get:
      summary: Returns a list of nodes registered at the consensus layer.
      parameters:
        - *limit
        - *offset
        - in: path
          name: entity_id
          required: true
          schema:
            type: string
          description: |
            The entity ID of the controlling entity of the nodes to return.
          example: *entity_id_1
      responses:
        '200':
          description: |
            A JSON object containing a list of nodes registered at the consensus layer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeList'
        <<: *common_error_responses

  /consensus/entities/{entity_id}/nodes/{node_id}:
    get:
      summary: Returns a node registered at the consensus layer.
      parameters:
        - in: path
          name: entity_id
          required: true
          schema:
            type: string
          description: |
            The entity ID of the entity controlling the node to return.
          example: *entity_id_1
        - in: path
          name: node_id
          required: true
          schema:
            type: string
          description: The node ID of the node to return.
          example: *node_id_1
      responses:
        '200':
          description: |
            A JSON object containing a node registered at the consensus layer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        <<: *common_error_responses

  /consensus/validators:
    get:
      summary: Returns a list of validators registered at the consensus layer.
      parameters:
        - *limit
        - *offset
      responses:
        '200':
          description: |
            A JSON object containing a list of validators registered
            at the consensus layer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidatorList'
        <<: *common_error_responses

  /consensus/validators/{entity_id}:
    get:
      summary: Returns a validator registered at the consensus layer.
      parameters:
        - in: path
          name: entity_id
          required: true
          schema:
            type: string
          description: The entity ID of the entity to return.
          example: *entity_id_1
      responses:
        '200':
          description: |
            A JSON object containing a validator registered at the
            consensus layer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Validator'
        <<: *common_error_responses

  /consensus/accounts:
    get:
      summary: Returns a list of consensus layer accounts.
      parameters:
        - *limit
        - *offset
        - in: query
          name: minAvailable
          schema:
            <<: *BigIntType
          description: A filter on the minimum available account balance.
        - in: query
          name: maxAvailable
          schema:
            <<: *BigIntType
          description: A filter on the maximum available account balance.
        - in: query
          name: minEscrow
          schema:
            <<: *BigIntType
          description: A filter on the minimum active escrow account balance.
        - in: query
          name: maxEscrow
          schema:
            <<: *BigIntType
          description: A filter on the maximum active escrow account balance.
        - in: query
          name: minDebonding
          schema:
            <<: *BigIntType
          description: A filter on the minimum debonding account balance.
        - in: query
          name: maxDebonding
          schema:
            <<: *BigIntType
          description: A filter on the maximum debonding account balance.
        - in: query
          name: minTotalBalance
          schema:
            <<: *BigIntType
          description: A filter on the minimum total account balance.
        - in: query
          name: maxTotalBalance
          schema:
            <<: *BigIntType
          description: A filter on the maximum total account balance.
      responses:
        '200':
          description: |
            A JSON object containing a list of consensus layer accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountList'
        <<: *common_error_responses

  /consensus/accounts/{address}:
    get:
      summary: Returns a consensus layer account.
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: The staking address of the account to return.
          example: *staking_address_1
      responses:
        '200':
          description: A JSON object containing a consensus layer account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        <<: *common_error_responses

  /consensus/accounts/{address}/delegations:
    get:
      summary: Returns an account's delegations.
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: The staking address of the account that delegated.
          example: *staking_address_1
      responses:
        '200':
          description: A JSON object containing a list of delegations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DelegationList'
        <<: *common_error_responses

  /consensus/accounts/{address}/debonding_delegations:
    get:
      summary: Returns an account's debonding delegations.
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: The staking address of the account that delegated.
          example: *staking_address_1
      responses:
        '200':
          description: A JSON object containing a list of debonding delegations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebondingDelegationList'
        <<: *common_error_responses

  /consensus/epochs:
    get:
      summary: Returns a list of consensus epochs.
      parameters:
        - *limit
        - *offset
      responses:
        '200':
          description: A JSON object containing a list of consensus epochs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EpochList'
        <<: *common_error_responses

  /consensus/epochs/{epoch}:
    get:
      summary: Returns a consensus epoch.
      parameters:
        - in: path
          name: epoch
          required: true
          schema:
            type: integer
            format: int64
          description: The epoch number of the epoch to return.
          example: *epoch_1
      responses:
        '200':
          description: A JSON object containing a consensus epoch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Epoch'
        <<: *common_error_responses

  /consensus/proposals:
    get:
      summary: Returns a list of governance proposals.
      parameters:
        - *limit
        - *offset
        - in: query
          name: submitter
          schema:
            type: string
          description: The submitter of the proposal.
          example: *staking_address_1
        - in: query
          name: state
          schema:
            type: string
          description: The state of the proposal.
          example: *proposal_state_1
      responses:
        '200':
          description: A JSON object containing a list of governance proposals.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalList'
        <<: *common_error_responses

  /consensus/proposals/{proposal_id}:
    get:
      summary: Returns a governance proposal.
      parameters:
        - in: path
          name: proposal_id
          required: true
          schema:
            type: integer
            format: int64
          description: The unique identifier of the proposal to return.
          example: *proposal_id_1
      responses:
        '200':
          description: A JSON object containing a governance proposal.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
        <<: *common_error_responses

  /consensus/proposals/{proposal_id}/votes:
    get:
      summary: Returns a list of votes for a governance proposal.
      parameters:
        - *limit
        - *offset
        - in: path
          name: proposal_id
          required: true
          schema:
            type: integer
            format: int64
          description: |
            The unique identifier of the proposal for which votes are returned.
          example: *proposal_id_1
      responses:
        '200':
          description: |
            A JSON object containing a list of votes for a governance proposal.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalVotes'
        <<: *common_error_responses

  /emerald/blocks:
    get:
      summary: Returns a list of Emerald blocks.
      parameters:
        - *limit
        - *offset
        - in: query
          name: from
          schema:
            type: integer
            format: int64
          description: A filter on minimum block height, inclusive.
          example: *block_height_1
        - in: query
          name: to
          schema:
            type: integer
            format: int64
          description: A filter on maximum block height, inclusive.
          example: *block_height_2
        - in: query
          name: after
          schema:
            type: string
            format: date-time
          description: A filter on minimum block time, inclusive.
          example: *iso_timestamp_1
        - in: query
          name: before
          schema:
            type: string
            format: date-time
          description: A filter on maximum block time, inclusive.
          example: *iso_timestamp_2
      responses:
        '200':
          description: A JSON object containing a list of Emerald blocks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuntimeBlockList'
        <<: *common_error_responses

  /emerald/transactions:
    get:
      summary: Returns a list of Emerald transactions.
      parameters:
        - *limit
        - *offset
        - in: query
          name: block
          schema:
            type: integer
            format: int64
          description: A filter on block round.
          example: *runtime_block_round_1
        - in: query
          name: rel
          schema:
            type: string
          # TODO: Implement autodetection of Eth addresses, get rid of last sentence.
          description: |
            A filter on related accounts. Every returned transaction will refer to
            this account in a way. For example, for an `accounts.Transfer` tx, this will be
            the sender or the recipient of tokens.
            The indexer detects related accounts inside EVM transactions and events on a
            best-effort basis. For example, it inspects ERC20 methods inside `evm.Call` txs.
            However, you must provide the oasis-style derived address here, not the Eth address.
            See `AddressPreimage` for more info on oasis-style vs Eth addresses.
          example: *staking_address_1
      responses:
        '200':
          description: |
            A JSON object containing a list of Emerald transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuntimeTransactionList'
        <<: *common_error_responses

  /emerald/tokens:
    get:
      summary: Returns a list of ERC-20 tokens on Emerald.
      parameters:
        - *limit
        - *offset
      responses:
        '200':
          description: |
            A JSON object containing a list of ERC-20 tokens on Emerald.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuntimeTokenList'
        <<: *common_error_responses

  /consensus/stats/tx_volume:
    get:
      summary: Returns the consensus layer transaction volume at daily granularity
      parameters:
        - *limit
        - *offset
        - *bucket_size_seconds
      responses:
        '200':
          description: |
            A JSON object containing a list of TPS values for each interval.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TxVolumeList'
        <<: *common_error_responses

components:
  schemas:
    ApiError:
      type: object
      properties:
        msg:
          type: string
          description: An error message.
          example: 'internal storage error'

    Status:
      type: object
      required: [latest_chain_id, latest_block, latest_update]
      properties:
        latest_chain_id:
          x-go-name: LatestChainID  # oapi-codegen generates LatestChainId (with a lowercase d) by default.
          type: string
          description: The most recently indexed chain ID.
          example: *chain_id_1
        latest_block:
          type: integer
          format: int64
          description: The height of the most recent indexed block. Query a synced Oasis node for the latest block produced.
          example: *block_height_1
        latest_update:
          type: string
          format: date-time
          description: The RFC 3339 formatted time when the Indexer processed the latest block. Compare with current time for approximate indexing progress with the Oasis Network.
          example: *iso_timestamp_1

    BlockList:
      type: object
      required: [blocks]
      properties:
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/Block'
      description: |
        A list of consensus blocks.

    Block:
      type: object
      required: [height, hash, timestamp, num_transactions] # TODO: size, gas_used
      properties:
        height:
          type: integer
          format: int64
          description: The block height.
          example: *block_height_1
        hash:
          type: string
          description: The block header hash.
          example: *block_hash_1
        timestamp:
          type: string
          format: date-time
          description: The second-granular consensus time.
          example: *iso_timestamp_1
        num_transactions:
          type: integer
          format: int32
          description: Number of transactions in the block.
          example: 17
        # TODO: Not available on backend
        # size:
        #   type: integer
        #   format: int64
        #   description: Size of the block, in bytes. TODO: Be more exact. Should this include results? By far the easiest is to give the total bytesize of txs here.
        #   example: 123456
        # gas_used:
        #   type: integer
        #   format: int64
        #   description: Total gas used by the transactions in the block.
        #   example: 123456
      description: |
        A consensus block.

    Delegation:
      type: object
      required: [amount, shares, validator_address]
      properties:
        amount:
          <<: *BigIntType
          description: The amount of tokens delegated in base units.
        shares:
          <<: *BigIntType
          description: The shares of tokens delegated.
        validator_address:
          type: string
          description: The delegatee address.
          example: *staking_address_1
      description: |
        A delegation.

    DelegationList:
      type: object
      required: [delegations]
      properties:
        delegations:
          type: array
          items:
            $ref: '#/components/schemas/Delegation'
      description: |
        A list of delegations.

    DebondingDelegation:
      type: object
      required: [amount, shares, validator_address, debond_end]
      properties:
        amount:
          <<: *BigIntType
          description: The amount of tokens delegated in base units.
        shares:
          <<: *BigIntType
          description: The shares of tokens delegated.
        validator_address:
          type: string
          description: The delegatee address.
          example: *staking_address_1
        debond_end:
          type: integer
          format: int64
          description: The epoch at which the debonding ends.
      description: |
        A debonding delegation.

    DebondingDelegationList:
      type: object
      required: [debonding_delegations]
      properties:
        debonding_delegations:
          type: array
          items:
            $ref: '#/components/schemas/DebondingDelegation'
      description: |
        A list of debonding delegations.

    ConsensusTxMethod:
      type: string
      enum:
        - staking.Transfer
        - staking.AddEscrow
        - staking.ReclaimEscrow
        - staking.AmendCommissionSchedule
        - staking.Allow
        - staking.Withdraw
        - roothash.ExecutorCommit
        - roothash.ExecutorProposerTimeout
        - registry.RegisterEntity
        - registry.RegisterNode
        - registry.RegisterRuntime
        - governance.CastVote
        - governance.SubmitProposal
        - beacon.PVSSCommit
        - beacon.PVSSReveal
        - beacon.VRFProve
      example: staking.Transfer

    TransactionList:
      type: object
      required: [transactions]
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
      description: |
        A list of consensus transactions.

    Transaction:
      type: object
      required: [block, index, timestamp, hash, sender, nonce, fee, method, body, success]
      properties:
        block:
          type: integer
          format: int64
          description: The block height at which this transaction was executed.
          example: *block_height_1
        index:
          type: integer
          format: int32
          description: 0-based index of this transaction in its block
          example: 17
        timestamp:
          type: string
          format: date-time
          description: |
            The second-granular consensus time this tx's block, i.e. roughly when the
            [block was proposed](https://github.com/tendermint/tendermint/blob/v0.34.x/spec/core/data_structures.md#header).
          example: *iso_timestamp_3
        hash:
          type: string
          description: The cryptographic hash of this transaction's encoding.
          example: *tx_hash_1
        sender:
          type: string
          description: The address of who sent this transaction.
          example: *staking_address_1
        nonce:
          type: integer
          format: int64
          description: The nonce used with this transaction, to prevent replay.
          example: 0
        fee:
          <<: *BigIntType
          description: |
            The fee that this transaction's sender committed
            to pay to execute it.
          example: 1000
        method:
          $ref: '#/components/schemas/ConsensusTxMethod'
          description: The method that was called.
        body:
          type: string
          format: byte
          # TODO: This is a serialzied CBOR blob. Expose as a JSON subtree instead.
          # Front-end can pull the "recipient" field from here for transactions of a suitable type.
          description: The method call body.
          example: *tx_body_1
        success:
          type: boolean
          description: Whether this transaction successfully executed.
      description: |
        A consensus transaction.

    ConsensusEventType:
      type: string
      enum:
        - governance.proposal_executed
        - governance.proposal_finalized
        - governance.proposal_submitted
        - governance.vote
        - registry.entity
        - registry.node_unfrozen
        - registry.node
        - registry.runtime
        - roothash.execution_discrepancy
        - roothash.executor_committed
        - roothash.finalized
        - staking.allowance_change
        - staking.burn
        - staking.escrow.add
        - staking.escrow.debonding_start
        - staking.escrow.reclaim
        - staking.escrow.take
        - staking.transfer
      example: staking.transfer

    ConsensusEventList:
      type: object
      required: [events]
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/ConsensusEvent'
      description: |
        A list of consensus events.

    ConsensusEvent:
      type: object
      required: [height, type, body]
      properties:
        height:
          type: integer
          format: int64
          description: The block height at which this event was generated.
          example: *block_height_1
        tx_index:
          type: integer
          format: int32
          nullable: true
          description: |
            0-based index of this event's originating transaction within its block.
            Absent if the event did not originate from a transaction.
          example: 5
        tx_hash:
          type: string
          nullable: true
          description: |
            Hash of this event's originating transaction.
            Absent if the event did not originate from a transaction.
          example: *tx_hash_1
        type:
          type: string
          description: The type of the event. 
          schema:
            $ref: '#/components/schemas/ConsensusEventType'
          example: *event_type_1
        body:
          type: object
          description: |
            The event contents. This spec does not encode the many possible types;
            instead, see [the Go API](https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/consensus/api/transaction/results#Event) of oasis-core.
            This object will conform to one of the `*Event` types two levels down
            the hierarchy, e.g. `TransferEvent` from `Event > staking.Event > TransferEvent`
      description: |
        An event emitted by the consensus layer.

    EntityList:
      type: object
      required: [entities]
      properties:
        entities:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
      description: |
        A list of entities registered at the consensus layer.

    Entity:
      type: object
      required: [id, address, nodes]
      properties:
        id:
          x-go-name: ID
          type: string
          description: The public key identifying this entity.
          example: *entity_id_1
        address:
          type: string
          description: The staking address belonging to this entity; derived from the entity's public key.
          example: *staking_address_1
        nodes:
          type: array
          items:
            type: string
          description: The vector of nodes owned by this entity.
      description: |
        An entity registered at the consensus layer.

    ValidatorList:
      type: object
      required: [validators]
      properties:
        validators:
          type: array
          items:
            $ref: '#/components/schemas/Validator'
      description: |
        A list of validators registered at the consensus layer.

    ValidatorCommissionBound:
      type: object
      required: [lower, upper, epoch_start, epoch_end]
      properties:
        lower:
          type: integer
          format: uint64
        upper:
          type: integer
          format: uint64
        epoch_start:
          type: integer
          format: uint64
        epoch_end:
          type: integer
          format: uint64

    ValidatorMedia:
      type: object
      # All of the fields are optional.
      properties:
        website_link:
          type: string
          description: An URL associated with the entity.
        email_address:
          type: string
          description: An email address for the validator.
        twitter_acc:
          type: string
          description: A Twitter handle.
        tg_chat:
          type: string
          description: An Telegram handle.
        logotype:
          type: string
          description: A logo type.
        name:
          type: string
          description: The human-readable name of this validator.
          example: WhaleStake

    Validator:
      type: object
      required: [entity_address, entity_id, name, node_id, escrow, active, status, current_rate, current_commission_bound]
      properties:
        entity_address:
            type: string
            description: The staking address identifying this Validator.
            example: *staking_address_1
        entity_id:
          x-go-name: EntityID
          type: string
          description: The public key identifying this Validator.
          example: *entity_id_1
        node_id:
          x-go-name: NodeID
          type: string
          description: The public key identifying this Validator's node.
          example: *node_id_1
        escrow:
          <<: *BigIntType
          description: The amount staked.
        active:
          type: boolean
          description: Whether the entity is part of validator set (top <scheduler.params.max_validators> by stake).
        status:
          type: boolean
          description: Whether the entity has a node that is registered for being a validator, node is up to date, and has successfully registered itself. It may or may not be part of validator set.
        media:
          $ref: '#/components/schemas/ValidatorMedia'
        current_rate:
          type: integer
          format: uint64
          description: Commission rate.
        current_commission_bound:
          $ref: '#/components/schemas/ValidatorCommissionBound'
      description: |
        An validator registered at the consensus layer.

    NodeList:
      type: object
      required: [entity_id, nodes]
      properties:
        entity_id:
          x-go-name: EntityID
          type: string
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/Node'
      description: |
        A list of nodes registered at the consensus layer.

    Node:
      type: object
      required: [id, entity_id, expiration, tls_pubkey, tls_next_pubkey, p2p_pubkey, consensus_pubkey, roles]
      properties:
        id:
          x-go-name: ID
          type: string
          description: The public key identifying this node.
          example: *node_id_1
        entity_id:
          x-go-name: EntityID
          type: string
          description: |
            The public key identifying the entity controlling this node.
          example: *entity_id_1
        expiration:
          type: integer
          format: int64
          description: The epoch in which this node's commitment expires.
        tls_pubkey:
          x-go-name: TLSPubkey
          type: string
          description: The public key used for establishing TLS connections.
        tls_next_pubkey:
          x-go-name: TLSNextPubkey
          type: string
          description: |
            The public key that will be used for establishing TLS connections
            upon rotation.
        p2p_pubkey:
          x-go-name: P2PPubkey
          type: string
          description: The unique identifier of this node on the P2P transport.
        consensus_pubkey:
          type: string
          description: The unique identifier of this node as a consensus member
        roles:
          type: string
          description: A bitmask representing this node's roles.
      description: |
        A node registered at the consensus layer.

    AccountList:
      type: object
      required: [accounts]
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
      description: |
        A list of consensus layer accounts.

    AddressDerivationContext:
      type: string
      enum:
        - "oasis-core/address: staking"
        - "oasis-runtime-sdk/address: secp256k1eth"
        - "oasis-runtime-sdk/address: sr25519"
        - "oasis-runtime-sdk/address: multisig"
        - "oasis-runtime-sdk/address: module"
        - "oasis-runtime-sdk/address: runtime"

    AddressPreimage:
      description: |
        The data from which a consensus-style address (`oasis1...`)
        was derived. Notably, for EVM runtimes like Sapphire,
        this links the oasis address and the Ethereum address.

        Oasis addresses are derived from a piece of data, such as an ed25519
        public key or an Ethereum address. For example, [this](https://github.com/oasisprotocol/oasis-sdk/blob/b37e6da699df331f5a2ac62793f8be099c68469c/client-sdk/go/helpers/address.go#L90-L91)
        is how an Ethereum is converted to an oasis address. The type of underlying data usually also
        determines how the signatuers for this address are verified.

        Consensus supports only "staking addresses" (`context="oasis-core/address: staking"`
        below; always ed25519-backed).
        Runtimes support all types. This means that every consensus address is also
        valid in every runtime. For example, in EVM runtimes, you can use staking
        addresses, but only with oasis tools (e.g. a wallet); EVM contracts such as
        ERC20 tokens or tools such as Metamask cannot interact with staking addresses.
      type: object
      required: [context, address_data]
      properties:
        context:
          $ref: "#/components/schemas/AddressDerivationContext"
          description: |
            The method by which the oasis address was derived from `address_data`.
          example: "oasis-runtime-sdk/address: secp256k1eth"
        context_version:
          type: integer
          nullable: true
          default: 0
          description: Version of the `context`.
        address_data:
          type: string
          format: hex
          description: |
            The hex-encoded data from which the oasis address was derived.
            When `context = "oasis-runtime-sdk/address: secp256k1eth"`, this
            is the Ethereum address (without the leading `0x`). All-lowercase.
          example: '9907a0cf64ec9fbf6ed8fd4971090de88222a9ac'

    RuntimeName:
      description: |
        The name of a runtime. This is a human-readable identifier, and should
        stay stable across runtime upgrades/versions.
      type: string
      enum:
        - emerald
      example: emerald

    RuntimeBalance:
      description: Balance of an account in a runtime.
      type: object
      required: [amount, runtime, token_id, token_symbol]
      properties:
        amount:
          <<: *BigIntType
          description: Number of base units held; as a string.
        runtime:
          $ref: "#/components/schemas/RuntimeName"
        # TODO:
        # - How do we handle NFTs? Add another field?
        # - We do not handle non-native tokens from the `accounts` SDK module. The plan is to use
        #   their denomination name for both `token_id` and `token_symbol`, or update the SDK to have tickers.
        token_id:
          x-go-name: TokenID
          type: string
          description: Unique identifier for the token. For EVM tokens, this is their eth address.
        token_symbol:
          type: string
          description: The token ticker symbol. Not guaranteed to be unique across distinct tokens.

    Account:
      type: object
      required: [address, address_preimage, nonce, runtime_balances, available, escrow, debonding, delegations_balance, debonding_delegations_balance, allowances]
      properties:
        address:
          type: string
          description: The staking address for this account.
          example: *staking_address_1
        address_preimage:
          $ref: '#/components/schemas/AddressPreimage'
        nonce:
          type: integer
          format: int64
          description: A nonce used to prevent replay.
          example: 0
        # TODO: limit this to 1000 entries. If folks have more,
        # we can eventually open up a separate, paginable endpoint just for balances.
        runtime_balances:
          type: array
          items:
            $ref: '#/components/schemas/RuntimeBalance'
        available:
          <<: *BigIntType
          description: The available balance, in base units.
        escrow:
          <<: *BigIntType
          description: The active escrow balance, in base units.
        debonding:
          <<: *BigIntType
          description: The debonding escrow balance, in base units.
        delegations_balance:
          <<: *BigIntType
          description: The delegations balance, in base units.
        debonding_delegations_balance:
          <<: *BigIntType
          description: The debonding delegations balance, in base units.
          example: 10000000000
        allowances:
          type: array
          items:
            $ref: '#/components/schemas/Allowance'
          description: The allowances made by this account.
      description: |
        A consensus layer account.

    Allowance:
      type: object
      required: [address, amount]
      properties:
        address:
          type: string
          description: The allowed account.
          example: *staking_address_2
        amount:
          <<: *BigIntType
          description: The amount allowed for the allowed account.

    EpochList:
      type: object
      required: [epochs]
      properties:
        epochs:
          type: array
          items:
            $ref: '#/components/schemas/Epoch'
      description: |
        A list of consensus epochs.

    Epoch:
      type: object
      required: [id, start_height]
      properties:
        id:
          x-go-name: ID
          type: integer
          format: int64
          description: The epoch number.
          example: *epoch_1
        start_height:
          type: integer
          format: uint64
          description: The (inclusive) height at which this epoch started.
          example: *block_height_1
        end_height:
          type: integer
          format: uint64
          description: The (inclusive) height at which this epoch ended. Omitted if the epoch is still active.
          example: *block_height_2
      description: |
        A consensus epoch.

    ProposalList:
      type: object
      required: [proposals]
      properties:
        proposals:
          type: array
          items:
            $ref: '#/components/schemas/Proposal'
      description: |
        A list of governance proposals.

    ProposalTarget:
      type: object
      properties:
        consensus_protocol:
          type: string
        runtime_host_protocol:
          type: string
        runtime_committee_protocol:
          type: string
      description: The target propotocol versions for this upgrade proposal.
      
    Proposal:
      type: object
      # TODO: Revise required fields. Most fields are required for actual proposals, and only absent
      # for proposal cancellations (which instead have the `cancels` field). Split API and the DB into
      # two types/tables?
      required: [id, submitter, state, deposit, target, cancels, created_at, closes_at, invalid_votes]
      properties:
        id:
          x-go-name: ID
          type: integer
          format: uint64
          description: The unique identifier of the proposal.
          example: *proposal_id_1
        submitter:
          type: string
          description: The staking address of the proposal submitter.
          example: *staking_address_1
        state:
          type: string
          description: The state of the proposal.
          example: 'active'
        deposit:
          <<: *BigIntType
          description: The deposit attached to this proposal.
        handler:
          type: string
          description: The name of the upgrade handler.
        target:
          $ref: '#/components/schemas/ProposalTarget'
        epoch:
          type: integer
          format: uint64
          description: The epoch at which the proposed upgrade will happen.
          example: *epoch_1
        cancels:
          type: integer
          format: int64
          description: |
            The proposal to cancel, if this proposal proposes
            cancelling an existing proposal.
        created_at:
          type: integer
          format: int64
          description: The epoch at which this proposal was created.
          example: *epoch_1
        closes_at:
          type: integer
          format: int64
          description: The epoch at which voting for this proposal will close.
          example: *epoch_2
        invalid_votes:
          <<: *BigIntType
          description: |
            The number of invalid votes for this proposal, after tallying.
      description: |
        A governance proposal.

    ProposalVotes:
      type: object
      required: [proposal_id, votes]
      properties:
        proposal_id:
          x-go-name: ProposalID
          type: integer
          format: uint64
          description: The unique identifier of the proposal.
        votes:
          type: array
          items:
            $ref: '#/components/schemas/ProposalVote'
          description: The list of votes for the proposal.
      description: |
        A list of votes for a governance proposal.

    ProposalVote:
      type: object
      required: [address, vote]
      properties:
        address:
          type: string
          description: The staking address casting this vote.
          example: *staking_address_1
        vote:
          type: string
          description: The vote cast.
          example: 'yes'

    RuntimeBlockList:
      type: object
      required: [blocks]
      properties:
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/RuntimeBlock'
      description: |
        A list of consensus blocks.

    RuntimeBlock:
      type: object
      required: [round, hash, timestamp, num_transactions, size, gas_used]
      properties:
        round:
          type: integer
          format: int64
          description: The block round.
          example: *runtime_block_round_1
        hash:
          type: string
          description: The block header hash.
          example: *runtime_block_hash_1
        timestamp:
          type: string
          format: date-time
          description: The second-granular consensus time.
          example: *iso_timestamp_3
        num_transactions:
          type: integer
          format: int32
          description: The number of transactions in the block.
          example: 1
        size:
          type: integer
          format: int32
          description: The total byte size of all transactions in the block.
          example: 203
        gas_used:
          type: integer
          format: int64
          description: The total gas used by all transactions in the block.
          example: 118597
      description: |
        A ParaTime block.

    RuntimeTransactionList:
      type: object
      required: [transactions]
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/RuntimeTransaction'
      description: |
        A list of runtime transactions.

    RuntimeTransaction:
      type: object
      # NOTE: Not guaranteed to be present: eth_hash, to, amount.
      required: [round, timestamp, hash, sender_0, nonce_0, fee, gas_limit, method, body, success]
      properties:
        round:
          type: integer
          format: int64
          description: The block round at which this transaction was executed.
          example: 3379702
        timestamp:
          type: string
          format: date-time
          # TODO REVIEW: Is this the time the block was _proposed_, or agreed on, or some other time?
          description: The second-granular consensus time when this tx's block was proposed.
          example: *iso_timestamp_3
        hash:
          type: string
          description: The Oasis cryptographic hash of this transaction's encoding.
          example: 8394f682150e5f62b02f197d16b4769d032cb1c1b7a6dcf853ba1b12626e080b
        eth_hash:
          type: string
          description: |
            The Ethereum cryptographic hash of this transaction's encoding.
            Absent for non-Ethereum-format transactions.
          example: 9e6a5837c6366d4a7e477c71ffe32d40915cdef7ef209792259e5ee70caf2705
        sender_0:
          type: string
          description: |
            The Oasis address of this transaction's 0th signer.
            Unlike Ethereum, Oasis natively supports multiple-signature transactions.
            However, the great majority of transactions only have a single signer in practice.
            Retrieving the other signers is currently not supported by this API.
          # NOTE: To expose the other signers, use the transaction_signers table.
          example: oasis1qz670t637yyxshnlxhjj5074wgwl94d0x5x69zqd
        nonce_0:
          type: integer
          format: uint64
          description: The nonce used with this transaction's 0th signer, to prevent replay.
          example: 114194
        fee:
          type: string
          description: |
            The fee that this transaction's sender committed to pay to execute
            it (total, native denomination, ParaTime base units, as a string).
          example: "3000000000000000"
        gas_limit:
          type: integer
          format: uint64
          description: |
            The maximum gas that this transaction's sender committed to use to
            execute it.
          example: 30000
        method:
          type: string
          description: The method that was called.
          example: "evm.Call"
        body:
          type: object
          description: The method call body.
          example: {"address": "t1mAPucIdVnrYBpJOcLV2nZoOFo=", "data": RBo+cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=", "value": ""}
        to:
          type: string
          description: |
            A reasonable "to" Oasis address associated with this transaction,
            if applicable. The meaning varies based on the transaction method. Some notable examples:
              - For `method = "accounts.Transfer"`, this is the paratime account receiving the funds.
              - For `method = "consensus.Deposit"`, this is the paratime account receiving the funds.
              - For `method = "consensus.Withdraw"`, this is a consensus (!) account receiving the funds.
              - For `method = "evm.Create"`, this is the address of the newly created smart contract.
              - For `method = "evm.Call"`, this is the address of the called smart contract
          example: "oasis1qq6ulxmcagnp5nr56ylva7nhmwnxtf0krumg9dkq"
        amount:
          type: string
          description: |
            A reasonable "amount" associated with this transaction, if
            applicable. The meaning varies based on the transaction mehtod.
            Usually in native denomination, ParaTime units. As a string.
          example: "100000001666393459"
        success:
          type: boolean
          description: Whether this transaction successfully executed.
      description: |
        A runtime transaction.

    EvmTokenType:
      type: string
      enum:
        - ERC20
        - ERC721
        - ERC1155

    RuntimeTokenList:
      type: object
      required: [tokens]
      properties:
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/RuntimeToken'
      description: |
        A list of ERC-20 tokens on a runtime.

    RuntimeToken:
      type: object
      required: [contract_addr, num_holders, type]
      properties:
        contract_addr:
          type: string
          description: The Oasis address of this token's contract.
          example: 'oasis1qp2hssandc7dekjdr6ygmtzt783k3gn38uupdeys'
        name:
          type: string
          description: Name of the token, as provided by token contract's `name()` method.
          example: Uniswap
        symbol:
          type: string
          description: Symbol of the token, as provided by token contract's `symbol()` method.
          example: UNI
        decimals:
          type: integer
          description: |
            The number of least significant digits in base units that should be displayed as
            decimals when displaying tokens. `tokens = base_units / (10**decimals)`.
            Affects display only. Often equals 18, to match ETH.
          example: 18
        type:
          $ref: '#/components/schemas/EvmTokenType'
          description: |
            The heuristically determined interface that the token contract implements.
            A less specialized variant of the token might be detected; for example, an
            ERC-1363 token might be labeled as ERC-20 here. If the type cannot be
            detected or is not supported, this field will be null/absent.
        total_supply:
          type: string
          description: The total number of base units available.
        num_holders:
          type: integer
          format: int64
          description: |
            The number of addresses that have a nonzero balance of this token,
            as calculated from Transfer events.
          example: 123

    TxVolumeList:
      type: object
      required: [bucket_size_seconds, buckets]
      properties:
        bucket_size_seconds:
          type: integer
          format: uint32
        buckets:
          type: array
          items:
            $ref: '#/components/schemas/TxVolume'
          description: The list of daily transaction volumes.
      description: |
        A list of daily transaction volumes.

    TxVolume:
      type: object
      required: [bucket_start, tx_volume]
      properties:
        bucket_start:
          type: string
          format: date-time
          description: The date for this daily transaction volume measurement.
          example: *iso_timestamp_1
        tx_volume:
          type: integer
          format: uint64
          description: The transaction volume on this day.
          example: 420

  responses:
    InvalidRequest:
      description: Invalid request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    NotFound:
      description: No results found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    ServerError:
      description: A server error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
